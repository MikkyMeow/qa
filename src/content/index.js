export const themes = [
  {
    header: "Web Technologies (общие вопросы по веб-разработке)",
    questions: [
      {
        question: "Что такое прогрессивный рендеринг?",
        answer: `Прогрессивный рендеринг - это подход при разработке веб-приложений, который позволяет постепенно отображать контент на странице, улучшая восприятие пользователем. 
          Примеры:
          - приоритет контента в области видимости страницы
          - ленивая загрузка изображений
          - Асинхронная загрузка (lazy loading)
          - Использование заглушек (скелетоны)
          - Динамический импорт страниц и компонентов (подгружать только то, что вызывает юзер)`,
      },
      {
        question: "Что такое прогрессивный SSR?",
        answer:
          "Прогрессивный SSR (Server-Side Rendering) - это метод, когда сервер формирует начальную HTML-страницу с данными, которая затем дополняется на стороне клиента, обеспечивая более быструю загрузку контента.",
      },
      {
        question:
          "SSR (Server-Side Rendering) и CSR (Client-Side Rendering) плюсы и минусы?",
        answer:
          "SSR: + Улучшенная SEO-оптимизация, - Большая нагрузка на сервер. CSR: + Быстрая интерактивность, - Проблемы с SEO.",
      },
      {
        question: "Что такое Progressive Web Application (PWA)?",
        answer:
          "Progressive Web Application (PWA) - это веб-приложение, которое использует современные веб-технологии для обеспечения нативного опыта работы на различных устройствах.",
      },
      {
        question: "Что такое кроссбраузерность?",
        answer:
          "Кроссбраузерность - это способность веб-сайта или приложения одинаково хорошо работать на всех основных браузерах, не зависимо от их версий.",
      },
      {
        question: "Что такое OSI модель?",
        answer:
          "OSI модель - это семислойная модель, описывающая принципы работы и взаимодействия сетевых протоколов.",
      },
      {
        question: "Что такое поток документа?",
        answer:
          "Поток документа - это последовательность иерархически упорядоченных объектов в браузере, которая определяет порядок отображения элементов на веб-странице.",
      },
      {
        question: "Разница между адаптивным и отзывчивым дизайнами?",
        answer:
          "Отзывчивый дизайн позволяет создавать веб-сайты, которые могут адаптироваться к различным устройствам и экранам, тогда как адаптивный дизайн представляет собой подход, при котором создаются несколько фиксированных версий сайта для различных устройств.",
      },
      {
        question:
          "Разница между Progressive Enhancement и Graceful Degradation?",
        answer:
          "Progressive Enhancement - это подход разработки, при котором веб-страница создается с учетом базового функционала, который затем постепенно улучшается с добавлением новых возможностей. В то время как Graceful Degradation представляет собой метод, при котором создается полноценная версия веб-страницы, которая затем может упрощаться для более старых браузеров или устройств.",
      },
      {
        question:
          "Что такое Веб-компоненты и какие технологии в них используются?",
        answer: `Веб-компоненты - это набор веб-технологий, позволяющих создавать собственные пользовательские элементы с уникальной функциональностью и стилизацией. Основные технологии включают в себя Custom Elements, Shadow DOM, HTML Templates и HTML Imports.
          - Custom Elements: Позволяет создавать новые HTML теги и расширять существующие. Можно устанавливать свое поведение элементов через JS-классы наследуемые от HTMLElement. 
          - Shadow DOM: Создает инкапсулированные DOM-деревья не конфликтующие с остальным документом
          - HTML Template: Создание шаблонов с помощью <template>. Шаблоны парсятся и становятся неактивными. Плюс в том что разработчик может их показать по мере необходимости
          - HTML Imports: Импорт HTML документов в основной документ. Подход считается устаревшим.
          `,
      },
      {
        question: "Особенности разработки мультиязычных сайтов?",
        answer: `Разработка мультиязычных сайтов требует учета локализации контента, управления различными языками и культурными особенностями, создание гибкой системы перевода, а также обеспечение правильной кодировки и мультиязычных URL-адресов.
          - Выбор языковой стратегии: поддобем (example.com/en/, example.com/ru/) или динамическое переключение языков по кнопке
          - Локализация контента: не только перевод текста, но и адаптация к культурным особенностям и интересам аудитории, форматы даты и времени, единицы измерения
          - seo и метатеги. hreflang для указания каждой страницы для правильной индексации поисковиком
          - Тестирование, чтобы убедиться что все версии имеют одинаковую структуру и выполняют бизнес задачи
          - Оптимизация кэширования и производительность: отделить контент от визуала, чтобы при подгрузке языка грузился только контент, а не копии стилей
          - Правильно настроить кодировку
          `,
      },
      {
        question: "Что такое REST?",
        answer:
          "REST (Representational State Transfer) - это архитектурный стиль разработки взаимодействия между клиентом и сервером в сети с использованием стандартных протоколов и методов передачи данных.",
      },
      {
        question: "Что такое REST и RESTful api?",
        answer:
          "REST - это архитектурный стиль, а RESTful API - это API, разработанное с учетом принципов REST, таких как использование стандартных методов HTTP (GET, POST, PUT, DELETE) и ресурсов для работы с данными.",
      },
      {
        question: "Принципы REST-архитектуры?",
        answer: `Принципы REST-архитектуры включают: 
            - клиент-серверная архитектура: четкое разделение между клиентом и сервером, 
            - отсутствие состояния (stateless): каждый запрос содержит всю информацию для обработки. Сервер не хранит состояние между запросами, 
            - кэширование: чтобы уменьшить нагрузку на сервер. Кэширование должно быть явно указано в заголовках
            - единообразие интерфейса: Использование стандартных методов (GET POST DELETE PUT), 
            - слоистая система: каждый слой выполняет свою специфическую функцию, разделение логики, обязанностей, например слой для управления авторизацией, или слой который отвечает только за предоставление данных, или запись и т д`,
      },
      {
        question: "Что такое модель зрелости Ричардсона?",
        answer:
          "Модель зрелости Ричардсона - это методика оценки уровня зрелости и соответствия RESTful API принципам стиля REST. Она состоит из 4 уровней, начиная от уровня 0 (нет уровня) до уровня 3 (гипермедиа как движущая сила). ",
      },
      {
        question: "Основные уровни модели зрелости Ричардсона?",
        answer:
          "Основные уровни модели зрелости Ричардсона включают: 0 уровень - использование одного URI и одного метода HTTP, 1 уровень - создание отдельных URI для каждой сущности, 2 уровень - использование стандартных методов HTTP и статусы ответа (200, 404, 401, 500), 3 уровень - использование гипермедиа для определения возможных действий.",
      },
      {
        question: "Назовите критические этапы рендеринга?",
        answer:
          "Критические этапы рендеринга включают парсинг HTML, конструирование DOM, формирование CSSOM, создание дерева рендеринга, компоновку (layout), отрисовку (paint) и сведение (compositing).",
      },
      {
        question: "Разница между layout, painting и compositing?",
        answer:
          "Layout определяет размеры и позиции элементов на странице, painting закрашивает элементы в цвета и изображения, а compositing комбинирует все закрашенные элементы для создания окончательного изображения.",
      },
      {
        question:
          "Что такое Flash Of Unstyled Content (FOUC)? Как его избежать?",
        answer:
          "FOUC - это момент, когда в веб-странице сначала отображается неоформленный контент, а затем он визуально обновляется с примененными стилями. Его можно избежать с помощью корректной организации таблиц стилей, включения CSS в начале документа, а также использования заголовков <link> для внешних стилей.",
      },
      {
        question: "Что такое History API в браузере?",
        answer:
          "History API - это набор методов и свойств, позволяющий манипулировать историей браузера, включая переходы назад и вперед в истории сессии, а также управление URL-адресами.",
      },
      {
        question: "Что такое веб-хранилище (web storage)?",
        answer:
          "Веб-хранилище - это механизм HTML5, предоставляющий простое хранилище данных на стороне клиента в виде ключ-значение, включая localStorage и sessionStorage.",
      },
      {
        question: "Разница между cookie, sessionStorage и localStorage?",
        answer:
          "Cookie - это данные, хранящиеся на стороне клиента и отправляемые при каждом запросе на сервер; sessionStorage - хранит данные для одной сессии, которые удаляются после закрытия вкладки; localStorage - хранит постоянные данные, которые доступны между сессиями и вкладками.",
      },
      {
        question: "Способы уменьшения времени загрузки веб-страницы?",
        answer:
          "Способы включают уменьшение размера изображений, минификацию и сжатие файлов CSS и JavaScript, использование кэширования, отложенную загрузку ресурсов, асинхронную загрузку скриптов, а также оптимизацию критических путей рендеринга.",
      },
      {
        question:
          "Что такое Core Web Vitals? Какие основные метрики туда входят?",
        answer:
          "Core Web Vitals - это набор основных метрик для измерения пользовательского опыта, включающий Largest Contentful Paint (LCP), First Input Delay (FID) и Cumulative Layout Shift (CLS).",
      },
      {
        question: "Расскажите о метриках Core Web Vitals?",
        answer:
          "Основные метрики Core Web Vitals включают Largest Contentful Paint (LCP), измеряющую время загрузки основного контента, First Input Delay (FID), оценивающую время реакции на первое взаимодействие, и Cumulative Layout Shift (CLS), оценивающую стабильность макета страницы.",
      },
      {
        question: "Разница между preload, prefetch, preconnect и prerender?",
        answer:
          "Это значения атрибута rel. Это preload - загружает ресурс с высоким приоритетом, prefetch - предварительно загружает ресурс для будущего использования, preconnect - инициирует соединение с сервером для будущих запросов, prerender - загружает и рендерит страницу заранее.",
      },
      {
        question: "Для чего нужен паттерн PRPL?",
        answer:
          "Паттерн PRPL используется для создания быстрых и надежных веб-приложений. Он включает этапы Push (preload необходимых для отрисовки), Render (скорейшее отображение первого экрана), Pre-cache (фоновое кэширование оставшихся ресурсов доступных для повторного посещения) и Lazy-load (отложенная загрузка не критических ресурсов), оптимизируя загрузку и кэширование ресурсов.",
      },
      {
        question: "Что такое HTTP?",
        answer:
          "HTTP (HyperText Transfer Protocol) - это протокол передачи данных, используемый для связи между клиентом и сервером в сети Интернет.",
      },
      {
        question: "Из чего состоит HTTP-запрос?",
        answer:
          "HTTP-запрос состоит из URL-адреса, метода запроса (GET, POST, PUT, DELETE и т. д.), заголовков запроса, а иногда и тела запроса с данными.",
      },
      {
        question: "Какие методы может иметь HTTP-запрос?",
        answer:
          "HTTP-запрос может иметь различные методы, включая GET (получение данных), POST (отправка данных), PUT (обновление данных), DELETE (удаление данных) и другие.",
      },
      {
        question: "Что такое HTTP cookie? Для чего они используются?",
        answer:
          "HTTP cookie - это небольшая часть данных, отправляемая сервером и хранимая в браузере пользователя. Они используются для отслеживания сеансов, персонализации контента, хранения предпочтений пользователя и других целей.",
      },
      {
        question: "Разница между HTTP и HTTPS?",
        answer:
          "HTTP передает данные в открытом текстовом формате, в то время как HTTPS использует шифрование для безопасной передачи информации по сети.",
      },
      {
        question: "Разница между HTTP/1 и HTTP/2? TODO",
        answer:
          "HTTP/2 поддерживает мультиплексирование и использует бинарную форму фреймов для передачи данных, в отличие от текстового формата, используемого в HTTP/1.",
      },
      {
        question: "Как работает мультиплексирование в HTTP/2? TODO",
        answer:
          "Мультиплексирование в HTTP/2 позволяет одновременную передачу нескольких фреймов в рамках одного соединения, что улучшает производительность передачи данных.",
      },
      {
        question:
          "Что такое “трехстороннее рукопожатие” (Triple handshake)? TODO подробнее",
        answer:
          "“Трехстороннее рукопожатие” - это процесс установки TCP-соединения между клиентом и сервером, включающий три этапа: синхронизацию, подтверждение и подтверждение синхронизации.",
      },
      {
        question: "Разница между PUT- и POST-запросами?",
        answer:
          "PUT-запрос используется для обновления ресурса, в то время как POST-запрос предназначен для создания нового ресурса на сервере.",
      },
      {
        question: "Разница между протоколами TCP и UDP?",
        answer:
          "TCP является ориентированным на соединение и надежным протоколом доставки данных, в то время как UDP предоставляет более быструю, но менее надежную доставку данных в виде датаграмм.",
      },
      {
        question: "Что такое WebSocket? В чем принцип его работы?",
        answer:
          "WebSocket - это протокол связи, работающий поверх протокола TCP, обеспечивающий полнодуплексную связь между клиентом и сервером посредством единственного соединения TCP. Принцип его работы заключается в установлении постоянного соединения между клиентом и сервером для передачи данных в реальном времени.",
      },
      {
        question:
          "Разница между Long-Polling, Websockets и Server-Sent Events? TODO разобраться",
        answer:
          "Long-Polling используется для эмуляции двусторонней связи, Websockets предоставляют полнодуплексную связь, а Server-Sent Events поддерживают однонаправленную связь для отправки событий от сервера к клиенту.",
      },
      {
        question: "Как работает JSONP? TODO",
        answer:
          "JSONP (JSON with Padding) - это подход к работе с данными с других доменов в рамках политики Same-Origin Policy браузера. Он использует динамическое создание тега скрипта для получения данных и вызов колбэка для их обработки.",
      },
      {
        question: "Что такое IndexedDB в браузере? Преимущества IndexedDB?",
        answer:
          "IndexedDB - это база данных, встроенная в браузер, предназначенная для хранения значительных объемов структурированных данных. Преимущества IndexedDB включают поддержку транзакций, возможность хранить большие объемы данных, использование индексов для эффективных запросов и поддержку различных типов ключей.",
      },
      {
        question: "Что такое Service Workers?",
        answer:
          "Service Workers - это скрипты, работающие отдельно от основного потока JavaScript, обеспечивающие возможность кэширования ресурсов, работы в офлайн-режиме и уведомлений push в веб-приложениях.",
      },
      {
        question: "Что такое Web Workers?",
        answer:
          "Web Workers - это механизм браузера, позволяющий выполнять скрипты в фоновом потоке, не блокируя основной UI-поток, что улучшает производительность веб-приложений.",
      },
      {
        question: "Что такое Web Worklet?",
        answer:
          "Web Worklet - это каркас для создания малых скриптов, работающих вне основного потока JavaScript, что позволяет расширить функциональность веб-приложений.",
      },
      {
        question: "Механизм установки сеанса между клиентом и сервером?",
        answer:
          "Установка сеанса между клиентом и сервером обычно осуществляется через процесс аутентификации, обмен ключами для шифрования данных и установление уникального идентификатора сеанса, который используется для последующей связи.",
      },
      {
        question: "Что Такое API?",
        answer:
          "API (Application Programming Interface) - это набор спецификаций, позволяющих взаимодействовать между различными программами. В веб-разработке API часто используется для взаимодействия с внешними сервисами, передачи данных и выполнения различных операций.",
      },
      {
        question: "Что такое CDN?",
        answer:
          "CDN (Content Delivery Network) - это географически распределенная сеть серверов, способствующая оптимизации доставки контента конечным пользователям, повышает скорость загрузки контента и обеспечивает устойчивость функционирования ресурсов веб-сайтов.",
      },
      {
        question: "Что такое IP-адрес?",
        answer:
          "IP-адрес (Internet Protocol address) - это уникальный числовой идентификатор, присваиваемый каждому устройству, подключенному к сети, для обеспечения его локализации и коммуникации в сети.",
      },
      {
        question: "Разница между host и domain?",
        answer:
          "Host - это конкретное устройство или ресурс в сети, доступное по сети, в то время как domain - это именованный часть адреса, предназначенный для определения местоположения ресурса в сети Интернет.",
      },
      {
        question: "Разница между URI и URL? TODO",
        answer:
          "URI (Uniform Resource Identifier) - это идентификатор ресурса, тогда как URL (Uniform Resource Locator) - это подмножество URI, представляющее местоположение ресурса.",
      },
      {
        question: "Почему очищать кэш важно? Как это можно сделать?",
        answer:
          "Очистка кэша важна для обновления отображаемой информации, улучшения безопасности и конфиденциальности данных. Это можно сделать, очищая кэш браузера через настройки браузера или использованием специальных программ или механизмов управления кэшем веб-приложений.",
      },
    ],
  },
  {
    header: "Security (вопросы по веб-безопасности)",
    questions: [
      {
        question:
          "Разница между идентификацией, аутентификацией, авторизацией?",
        answer:
          "Идентификация - процедура, направленная на установление личности субъекта в информационной системе; Аутентификация - процедура проверки подлинности, действительности личности; Авторизация - предоставление определенным лицам или группам лиц прав на доступ и выполнение определенных действий в системе.",
      },
      {
        question: "Виды аутентификации?",
        answer:
          "Как примеры методов аутентификации можно выделить парольную аутентификацию, асимметричную криптографию, биометрическую аутентификацию, аутентификацию с помощью одноразовых паролей (OTP), а также многофакторную аутентификацию.",
      },
      {
        question: 'Что такое "распределенная система аутентификации" TODO?',
        answer:
          "Распределенная система аутентификации - это система, которая обеспечивает средства аутентификации и авторизации пользователей, работающая в распределенной среде. Она позволяет управлять доступом к ресурсам и выстраивать централизованный механизм безопасности в разнородной сетевой среде.",
      },
      {
        question:
          "Что такое токены JWT? Как их можно использовать для аутентификации пользователей?",
        answer:
          "JWT (JSON Web Token) - это стандарт, описывающий компактный и самодостаточный способ представления информации об аутентификации в виде токена. Их можно использовать для аутентификации пользователей путем генерации и отправки токена в ответ на успешную аутентификацию. Подписанный токен позволяет удостоверять подлинность информации и использовать его для последующего доступа.",
      },
      {
        question: "Что такое безопасные (Secure) и HttpOnly cookies?",
        answer:
          "Безопасные (Secure) cookies - это cookies, которые требуют защищенного HTTPS-соединения для передачи информации, чтобы предотвратить атаки типа перехвата данных. HttpOnly cookies предназначены для предотвращения доступа к информации из cookies из JavaScript для уменьшения уязвимости для межсайтового скриптинга и сокрытия cookies от потенциальных угроз.",
      },
      {
        question: "Что такое Content Security Policy (CSP)?",
        answer:
          "CSP (Content Security Policy) - это дополнительный уровень защиты, применяемый для снижения и ограничения возможных атак, таких как XSS и других внедрений кода, путем управления тем, что браузер может и не может выполнить веб-ресурсов по установленным политикам.",
      },
      {
        question: "Что такое CORS?",
        answer:
          "CORS (Cross-Origin Resource Sharing) - это механизм современных браузеров, позволяющий ограниченное взаимодействие с ресурсами другого домена, в частности между приложениями, работающими в одном домене, и ресурсами, находящимися в другом домене.",
      },
      {
        question: "Что такое межсайтовый скриптинг (XSS)?",
        answer:
          "Межсайтовый скриптинг (XSS) - это уязвимость, при которой злоумышленники внедряют вредоносные скрипты в веб-страницы, доступные другим пользователям на стороне клиента. При выполнении, вредоносный код на языке JavaScript выполняется на компьютере других пользователей, что может привести к краже данных, манипулированию содержимым страницы и другим атакам.",
      },
      {
        question: "Методы повышения безопасности веб-приложений?",
        answer:
          "Существует несколько методов для повышения безопасности веб-приложений, включая регулярную проверку на уязвимости, использование безопасных HTTP заголовков, а также реализацию механизмов аутентификации и авторизации.",
      },
      {
        question: "Что такое OWASP Top 10?",
        answer:
          "OWASP Top 10 - это список наиболее распространенных уязвимостей в веб-приложениях, который широко используется для повышения безопасности веб-приложений.",
      },
      {
        question: "Что такое SSL/TLS? Зачем они используются в веб-разработке?",
        answer:
          "SSL/TLS (Secure Sockets Layer/Transport Layer Security) - это протоколы шифрования, используемые в веб-разработке для обеспечения конфиденциальности и целостности передаваемых данных между клиентом и сервером.",
      },
      {
        question:
          "Какие основные угрозы безопасности могут возникать на веб-страницах?",
        answer:
          "Основными угрозами безопасности на веб-страницах являются межсайтовый скриптинг (XSS), злоумышленное использование cookies, фишинг, а также уязвимости веб-служб и базы данных.",
      },
      {
        question:
          "Какие типы HTTP заголовков могут быть полезны для обеспечения безопасности веб-приложений?",
        answer:
          "HTTP заголовки, такие как Content Security Policy (CSP), Strict-Transport-Security (HSTS), X-Content-Type-Options, X-Frame-Options, и X-XSS-Protection, могут быть полезны для обеспечения безопасности веб-приложений.",
      },
      {
        question:
          "Какие принципы следует учитывать при разработке стратегии безопасности?",
        answer:
          "При разработке стратегии безопасности следует учитывать принципы минимизации привилегий, принцип наименьших привилегий (POLP), принцип защиты в глубину, а также использование многофакторной аутентификации.",
      },
      {
        question: "Что такое принцип наименьших привилегий (POLP)?",
        answer:
          "Принцип наименьших привилегий (POLP) означает, что каждая единица программного кода или пользователь обладает только теми привилегиями, которые необходимы для выполнения своих обязанностей, и не имеет ненужных привилегий, что уменьшает потенциальные угрозы.",
      },
      {
        question:
          "Как можно защищаться от DDoS-атак (Distributed Denial of Service)?",
        answer:
          "Для защиты от DDoS-атак можно использовать методы фильтрации входящего трафика, использование CDN, настройка DNS, фильтрация трафика, предотвращение спама, использование модуля Testcookie, код 444, блокировка по географическому признаку, использование нейронных сетей, а также использование специализированных сервисов для предотвращения DDoS.",
      },
      {
        question:
          "Как можно защищаться от CSRF-атак (Cross-Site Request Forgery)?",
        answer:
          "Для защиты от CSRF-атак можно использовать методы организации токенов, валидацию входных данных, использование безопасных (Secure) и HttpOnly cookies, а также использование Content Security Policy (CSP).",
      },
      {
        question: "Как можно защищаться от межсайтового скриптинга (XSS)?",
        answer:
          "Для защиты от межсайтового скриптинга можно использовать настройку HTTP заголовков, таких как Content Security Policy (CSP), Strict-Transport-Security (HSTS), X-Content-Type-Options, X-Frame-Options, и X-XSS-Protection, а также проведение валидации и фильтрации входных данных, и использование безопасных HTTP cookies.",
      },
      {
        question:
          "Какие меры безопасности следует принять при работе с cookie на стороне клиента?",
        answer:
          "При работе с cookies на стороне клиента следует использовать безопасные (Secure) и HttpOnly cookies, проводить валидацию всех получаемых cookies, а также устанавливать правильные политики, такие как SameSite, для предотвращения утечек данных и атак. Также необходимо избегать хранения чувствительных данных в cookies.",
      },
    ],
  },
  {
    header:
      "OOP & FP (вопросы из объектно-ориентированного и функционального программирования)",
    questions: [
      {
        question: "Основные принципы ООП?",
        answer:
          "Основными принципами ООП являются инкапсуляция, наследование и полиморфизм. Инкапсуляция позволяет объединить данные и методы, наследование позволяет создавать новые классы на основе существующих, а полиморфизм позволяет использовать различные объекты с общим интерфейсом.",
      },
      {
        question: "Что такое SOLID?",
        answer:
          "SOLID - это мнемонический акроним, представляющий пять основных принципов объектно-ориентированного проектирования: принцип единственной ответственности, принцип открытости/закрытости, принцип подстановки Лисков, принцип разделения интерфейса и принцип инверсии зависимостей.",
      },
      {
        question: "Разница между классовым и прототипным наследованием?",
        answer:
          "Классовое наследование основано на создании объектов из классов (шаблонов), где классы определяют структуру объектов. Прототипное наследование основано на создании объектов из существующих объектов-прототипов путем клонирования.",
      },
      {
        question:
          "Однонаправленный поток данных и двусторонняя связь данных? В чем между ними разница?",
        answer:
          "Однонаправленный поток данных - это подход, при котором данные передаются только в одном направлении, что обеспечивает четкую структуру и уменьшает вероятность ошибок. Двусторонняя связь данных - это метод взаимодействия, при котором данные могут передаваться в обоих направлениях, что может повысить сложность системы и усложнить отслеживание причин ошибок.",
      },
      {
        question: "Что такое функциональное программирование?",
        answer:
          "Функциональное программирование - это парадигма программирования, где программа строится на функциях как на основных строительных блоках. В функциональном программировании состояние и изменяемость данных минимизированы, а функции рассматриваются как математические функции без побочных эффектов.",
      },
      {
        question: "Что такое MVC?",
        answer:
          "MVC (Model-View-Controller) - это шаблон проектирования, разделяющий компоненты веб-приложения на три отдельных уровня: модель (хранение данных), представление (отображение данных пользователю) и контроллер (управление пользовательским вводом).",
      },
      {
        question: "Что такое MVVM?",
        answer:
          "MVVM (Model-View-ViewModel) - это шаблон проектирования, подобный MVC, но с введением ViewModel, который помогает разделить логику представления и бизнес-логики отдельно.",
      },
      {
        question: "Что такое MVP?",
        answer:
          "MVP (Model-View-Presenter) - это шаблон проектирования, похожий на MVC, но с введением Presenter, который выступает в роли посредника между моделью и представлением, управляя бизнес-логикой.",
      },
      {
        question: "Недостатки паттерна MVW?",
        answer:
          "Недостатки паттерна MVW могут включать сложность отладки, сложность поддержания приложения из-за большого количества связей между компонентами типа Model, View и/или ViewModel, а также увеличенную сложность тестирования из-за тесной связанности компонентов.",
      },
      {
        question: "Разница между функцией и методом?",
        answer:
          "Основная разница между функцией и методом заключается в том, что функция - это независимый фрагмент кода, который может быть вызван напрямую, в то время как метод - это функция, определенная внутри класса или объекта и привязанная к нему.",
      },
      {
        question: "Что такое каррирование (Currying)?",
        answer:
          "Каррирование (Currying) - это техника функционального программирования, которая заключается в преобразовании функции с множеством аргументов в последовательность функций с одним аргументом, что позволяет использовать частичное применение функций и более гибко комбинировать их. Например, если у нас есть функция sum(a, b), то каррирование позволяет вызывать ее как sum(a)(b), что может быть полезно при частичном применении аргументов.",
      },
      {
        question: "Разница между ООП и ФП в JavaScript?",
        answer:
          "Основная разница между объектно-ориентированным и функциональным программированием в JavaScript заключается в подходе: ООП фокусируется на объектах с методами для управления состоянием, в то время как ФП фокусируется на функциях и их преобразовании для управления данными без изменения состояния.",
      },
      {
        question: "Плюсы и минусы ФП и ООП?",
        answer:
          "Плюсы функционального программирования (ФП) включают более простую отладку, устранение побочных эффектов и уменьшение изменяемости, в то время как минусы включают сложность понимания для начинающих и возможную сложность в интеграции с императивными API и структурами данных. Плюсы объектно-ориентированного программирования (ООП) включают явное представление объектов и их взаимодействие, удобство работы с изменяющимися данными, а минусы - это сложность в обработке асинхронных процессов и меньшая гибкость из-за многоуровневой иерархии.",
      },
      {
        question: "Разница между монолитной и микросервисной архитектурами?",
        answer:
          "Монолитная архитектура представляет собой приложение, в котором все компоненты объединены и развернуты как одна единица, в то время как микросервисная архитектура представляет собой приложение, разделенное на небольшие автономные службы, работающие вместе. Основная разница заключается в размере, скорости развертывания, сложности и независимости компонентов.",
      },
      {
        question: "Плюсы и минусы монолитной и микросервисной архитектур?",
        answer:
          'Монолитная архитектура обеспечивает более простое развертывание и управление, но может столкнуться с увеличенной сложностью изменений и масштабирования. Микросервисная архитектура гибче в развертывании и масштабировании, но требует дополнительных усилий по управлению и интеграции сервисов. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[4](https://purpleschool.ru/blog/monolith-vs-microservices)</sup> <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://eq4.tech/ru/stati/mikroservisnaya-arkhitektura-otlichiya-ot-monolitnoi-plyusy-i-minusy-primery-primeneniya/)</sup> ',
      },
      {
        question: "Какие принципы можно использовать вместе с наследованием?",
        answer:
          'Вместе с наследованием могут применяться принцип единственной ответственности, принцип открытости/закрытости, и принцип подстановки Барбары Лисков. Они способствуют более гибкой и расширяемой системе. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://habr.com/ru/companies/haulmont/articles/758780/)</sup> ',
      },
      {
        question: "Какие ещё принципы кроме SOLID вы знаете?",
        answer:
          "Помимо SOLID, существуют принципы программирования, такие как DRY (Don't Repeat Yourself), KISS (Keep It Simple, Stupid), YAGNI (You Aren't Gonna Need It) и др. Каждый из них направлен на улучшение структуры кода и облегчение его поддержки и развития. <sup className=\"rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600\">[1](https://habr.com/ru/companies/haulmont/articles/758780/)</sup> ",
      },
      {
        question: "Что такое дескрипторы свойств объектов?",
        answer:
          'Дескрипторы свойств объектов в JavaScript это механизм, который позволяет настраивать поведение свойств объекта, включая определение доступности для чтения и записи, возможность настройки геттеров и сеттеров и другие характеристики. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://purpleschool.ru/blog/monolith-vs-microservices)</sup> ',
      },
      {
        question: "В чем заключаются особенности геттеров и сеттеров?",
        answer:
          'Геттеры и сеттеры в JavaScript позволяют управлять доступом к свойствам объекта. Геттеры используются для получения значения свойства, а сеттеры - для установки значения. Они позволяют добавить логику или проверки при чтении или записи значений. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://purpleschool.ru/blog/monolith-vs-microservices)</sup> ',
      },
      {
        question:
          "Что такое статический метод класса (static)? Как осуществляется его вызов?",
        answer:
          'Статический метод класса (static) в JavaScript привязан к самому классу, а не к его экземплярам. Он вызывается напрямую от класса, обычно используется для методов, доступ к которым не требует создания экземпляра класса. Вызывается через имя класса, например, MyClass.staticMethod(). <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://purpleschool.ru/blog/monolith-vs-microservices)</sup> ',
      },
      {
        question: "Разница между композицией и наследованием?",
        answer:
          'Композиция включает объекты других классов в качестве членов, позволяя достичь гибкой структуры. Наследование создает новые классы на основе существующих, перенимая их свойства и методы. Композиция позволяет более гибкое управление зависимостями. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[2](https://www.atlassian.com/ru/microservices/microservices-architecture/microservices-vs-monolith)</sup> ',
      },
      {
        question: "Что такое композиция в контексте JavaScript?",
        answer:
          'Композиция в JavaScript - это подход, при котором объект может иметь другие объекты в качестве своих частей или зависимостей, что позволяет формировать более гибкие и легко модифицируемые структуры данных. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[7](https://www.sencha.com/blog/comprehensive-guide-javascript-design-pattern/)</sup> ',
      },
      {
        question: "Что такое паттерн, или шаблон проектирования?",
        answer:
          'Паттерн, или шаблон проектирования, - это повторяемое решение для общей проблемы в контексте разработки ПО. Это описывает проблемы, которые могут возникать при проектировании, и предлагает решения, которые могут быть использованы в различных сценариях разработки. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[2](https://www.toptal.com/javascript/comprehensive-guide-javascript-design-patterns)</sup> ',
      },
      {
        question: "Типы паттернов?",
        answer:
          'Паттерны могут быть разделены на три основные категории: Creational (создание объектов), Structural (структурирование объектов) и Behavioral (управление взаимодействием между объектами). Каждая категория включает множество специфических паттернов для конкретных задач и сценариев разработки. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://dev.to/jaimaldullat/javascript-design-patterns-the-ultimate-guide-part-1-1ehd)</sup> <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[7](https://www.sencha.com/blog/comprehensive-guide-javascript-design-pattern/)</sup> ',
      },
      {
        question: "Что такое GOF паттерны?",
        answer:
          'GOF (Gang of Four) паттерны - это набор основных паттернов, описанных в книге "Design Patterns: Elements of Reusable Object-Oriented Software" Гамма, Хелм, Джонсон, Влиссидес. Эти паттерны были разработаны для улучшения повторного использования, расширяемости и гибкости объектно-ориентированного программного обеспечения. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://www.lambdatest.com/blog/comprehensive-guide-to-javascript-design-patterns/)</sup> ',
      },
      {
        question: "Что такое GRASP паттерны?",
        answer:
          'GRASP (General Responsibility Assignment Software Patterns) паттерны - это принципы и паттерны для присвоения обязанностей в объектно-ориентированном дизайне программного обеспечения. Они включают понятия как высокоуровневого, так и низкоуровневого проектирования и способствуют созданию эффективных и расширяемых систем. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[2](https://www.toptal.com/javascript/comprehensive-guide-javascript-design-patterns)</sup> ',
      },
      {
        question: "Типы полиморфизма?",
        answer:
          'Существует три типа полиморфизма в объектно-ориентированном программировании: ad hoc (перегрузка функций и операторов), подтиповый (полиморфизм на основе наследования) и параметрический (обычно связанный с обобщенным программированием). Каждый тип поддерживает различные способы использования и обработки объектов. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[3](https://dev.to/topefasasi/js-design-patterns-a-comprehensive-guide-h3m)</sup> ',
      },
      {
        question:
          "Можно ли в JavaScript реализовать абстрактный класс и как это сделать?",
        answer:
          'В JavaScript нет встроенной поддержки абстрактных классов, но их можно имитировать, используя функции-конструкторы и прототипы, или современные методы, такие как классы и ключевое слово "extends". Абстрактные методы могут быть имитированы, вызывая ошибку при попытке их использования в общем родительском классе. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[3](https://dev.to/topefasasi/js-design-patterns-a-comprehensive-guide-h3m)</sup> ',
      },
      {
        question: "Как работает механизм прототипов в JavaScript?",
        answer:
          'Механизм прототипов в JavaScript основан на прототипном наследовании. В JavaScript каждый объект имеет ссылку на прототип (prototype), из которого он может наследовать свойства и методы. При доступе к свойству или методу объекта, интерпретатор JavaScript сначала проверяет наличие этого свойства или метода в самом объекте, а затем ищет его в прототипе объекта, поднимаясь по цепочке прототипов, пока не найдет необходимый элемент или достигнет вершины этой цепочки (null). <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://textjavascript.ru/rabota-s-prototipami-v-javascript-printsipy-i-primery-koda/)</sup> ',
      },
      {
        question: "Основные принципы функционального программирования?",
        answer:
          'Основные принципы функционального программирования включают неизменяемость (immutable data), чистые функции (pure functions), отсутствие побочных эффектов (side effects), высшего порядка функции (higher-order functions) и рекурсию (recursion). Эти принципы способствуют написанию более предсказуемого, чистого и легко тестируемого кода. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://frontend-stuff.com/blog/javascript-functional-programming/)</sup> ',
      },
      {
        question: "Плюсы функционального программирования?",
        answer:
          'Среди плюсов функционального программирования можно выделить чистоту функций (pure functions) и уменьшение состояния в приложении, легкость параллельного и асинхронного программирования, уменьшение количества ошибок благодаря отсутствию побочных эффектов, повторное использование кода и лаконичность выражений. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://frontend-stuff.com/blog/javascript-functional-programming/)</sup> ',
      },
      {
        question:
          "Разница между императивным и декларативным подходами программирования?",
        answer:
          'Императивный подход описывает как нужно что-то сделать, определяя шаги и детали исполнения задачи (например, циклы, условия). Декларативный подход фокусируется на том, что нужно сделать, без указания конкретных шагов выполнения (например, SQL для выборки данных). Императивный код описывает "как", в то время как декларативный код описывает "что". <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://frontend-stuff.com/blog/javascript-functional-programming/)</sup> ',
      },
      {
        question: "Что такое реактивное программирование?",
        answer:
          'Реактивное программирование - это парадигма программирования, ориентированная на поток данных и распространение изменений. Основные принципы реактивного программирования включают реакцию на изменения данных, автоматическое распространение обновлений и управления состоянием приложения исходя из потока данных. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://frontend-stuff.com/blog/javascript-functional-programming/)</sup> ',
      },
      {
        question: "Плюсы и минусы реактивного программирования?",
        answer:
          'Среди плюсов реактивного программирования можно выделить реактивность на изменения данных, более легкое управление состоянием в сложных приложениях и повышенную отзывчивость интерфейса. Однако минусами могут быть сложности в отладке и понимании потока данных, а также возможное усложнение структуры приложения. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://frontend-stuff.com/blog/javascript-functional-programming/)</sup> ',
      },
      {
        question: "Что такое Inversion of control?",
        answer:
          'Inversion of Control (IoC) - это принцип проектирования, согласно которому поток контроля в программе изменен, так что обычная последовательность действий, определенная программистом, перенесена во внешний программный компонент. IoC обычно реализуется с использованием шаблонов проектирования, таких как Dependency Injection и Service Locator. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[7](https://michaelzanggl.com/articles/demystifying-dependency-injection/)</sup> ',
      },
      {
        question: "Что такое Dependency injection?",
        answer:
          'Dependency Injection (DI) - это паттерн, который позволяет классу получать зависимости от внешних источников, таких как другие классы или компоненты, без создания этих зависимостей внутри самого класса. DI обычно реализуется путем передачи зависимостей через конструктор, метод или свойства объекта. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[7](https://michaelzanggl.com/articles/demystifying-dependency-injection/)</sup> <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://dev.to/gsbc/what-exactly-are-inversion-of-control-and-dependency-injection-how-do-they-correlate-with-each-other-2c3)</sup> ',
      },
      {
        question: "Разница между агрегацией и композицией?",
        answer:
          'Разница между агрегацией и композицией заключается в том, что агрегация представляет собой ассоциацию объектов, где один объект является частью другого, но остается независимым, тогда как композиция предполагает, что один объект является частью другого и будет уничтожен вместе с ним. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://stackoverflow.com/questions/3058/what-is-inversion-of-control)</sup> ',
      },
      {
        question:
          "Разница между процедурным и функциональным программированием?",
        answer:
          'Основное различие между процедурным и функциональным программированием заключается в том, что процедурное программирование ориентировано на процедуры и имеет изменяемое состояние, тогда как функциональное программирование ориентировано на функции и неизменяемые структуры данных. Функциональное программирование также способствует разработке в чистом функциональном стиле и более легкой отладке. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://khalilstemmler.com/articles/tutorials/dependency-injection-inversion-explained/)</sup> ',
      },
      {
        question:
          'Что такое паттерн "обратный плагин" (Reverse-Plugin Pattern)? Когда его стоит использовать?',
        answer:
          'Паттерн "обратный плагин" (Reverse-Plugin Pattern) - это шаблон проектирования, предполагающий, что вместо того, чтобы встроить некоторую функциональность в основной интерфейс, разработчики предоставляют API для сторонних разработчиков, которые могут подключать собственные реализации. Он удобно использовать, когда нужно, чтобы другие разработчики расширяли функциональность вашего приложения. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://khalilstemmler.com/articles/tutorials/dependency-injection-inversion-explained/)</sup> ',
      },
    ],
  },
  {
    header: "HTML (вопросы по языку гипертекстовой разметки)",
    questions: [
      {
        question: "Что такое HTML и для чего он используется?",
        answer:
          "HTML (HyperText Markup Language) - это язык разметки, используемый для создания и структурирования веб-страниц. Он используется для описания содержимого веб-страницы, включая текст, изображения, видео, ссылки и другие элементы.",
      },
      {
        question: "Что такое HTML-элемент? Какова его структура?",
        answer:
          "HTML-элемент - это основной строительный блок веб-страницы, который состоит из открывающего тега, содержимого элемента и закрывающего тега. Например, <p>Это абзац</p>.",
      },
      {
        question:
          "Что такое атрибуты в HTML? Как они используются в элементах?",
        answer:
          'Атрибуты в HTML предоставляют дополнительные сведения об элементе и определяют его поведение или внешний вид. Они добавляются в открывающий тег элемента и имеют формат name="value". Например, <a href="https://example.com">Ссылка</a>, где "href" - это атрибут, определяющий ссылку.',
      },
      {
        question: "Какие глобальные атрибуты есть в HTML?",
        answer:
          "Некоторые глобальные атрибуты в HTML включают id, class, style, title, tabindex, lang, data-* и другие. Глобальные атрибуты могут использоваться на большинстве HTML элементов и предоставляют общие функциональные возможности.",
      },
      {
        question: "Что такое категории контента в HTML5?",
        answer:
          "В HTML5 контент разделен на категории: метаданные, потоковый контент, встраиваемый контент, сценарии и секционный контент. Каждая категория предоставляет структуру для разметки различных типов контента на веб-странице.",
      },
      {
        question: "Какие категории считаются основными категориями контента?",
        answer:
          "Основные категории контента в HTML5 включают в себя потоковый контент (например, абзацы и списки) и секционный контент (например, заголовки и навигационные элементы). Эти категории обеспечивают структуру и семантику контента на веб-странице.",
      },
      {
        question: "Что такое doctype? И для чего он используется?",
        answer:
          "Doctype - это инструкция, которая сообщает браузеру, какую версию HTML или XHTML использует текущая веб-страница. Doctype используется для указания типа документа и помогает браузеру правильно отображать веб-страницу в соответствии с установленными стандартами.",
      },
      {
        question: "Опишите базовую структуру HTML-страницы?",
        answer:
          "Базовая структура HTML-страницы включает элементы doctype, html, head и body. Например: <!DOCTYPE html><html><head><title>Заголовок страницы</title></head><body><h1>Привет, мир!</h1></body></html>. Doctype указывает версию HTML, элемент html обозначает начало HTML-документа, элемент head содержит метаданные и ссылки на внешние ресурсы, а элемент body содержит видимое содержимое веб-страницы.",
      },
      {
        question:
          "Что такое валидация? И какие типы проверок HTML документа вы знаете?",
        answer:
          'Валидация - это процесс проверки соответствия документа определенным стандартам или правилам. Типы проверок HTML документа включают валидацию синтаксиса, проверку наличия обязательных элементов, правильное закрытие тегов, соответствие структуры документа установленным стандартам и другие. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://habr.com/ru/articles/101985/)</sup> ',
      },
      {
        question: "Основные этапы проверок валидности HTML-документа?",
        answer:
          'Основные этапы проверок валидности HTML-документа включают в себя проверку синтаксиса, проверку структуры HTML, проверку наличия обязательных элементов и атрибутов, а также соответствие установленным стандартам разметки. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[4](https://skyeng.ru/magazine/chto-takoe-validaciya/)</sup> ',
      },
      {
        question:
          "Если представить HTML5 как открытую веб-платформу, из каких блоков он состоит?",
        answer:
          'HTML5, представленный как открытая веб-платформа, состоит из блоков семантики (semantic), API, графики и мультимедиа, данные и связь, доступность, хранение, и мультимодальность. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[2](https://quizlet.com/ca/923337151/html-flash-cards/)</sup> ',
      },
      {
        question: "Какой тэг использовать для того, чтобы сверстать кнопку?",
        answer:
          "Для верстки кнопки в HTML используется тег <button>. Пример: <button>Нажми меня</button>.",
      },
      {
        question: "Что такое инлайновый стиль? Можно ли его переопределить?",
        answer:
          'Инлайновый стиль - это применение стилей непосредственно к элементу через атрибут style в HTML. Инлайновые стили можно переопределить с помощью более специфичных селекторов в таблицах стилей CSS. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://timeweb.com/ru/community/articles/validaciya-koda-chto-eto)</sup> ',
      },
      {
        question: "Есть ли у HTML элементов свои дефолтные специфичные стили?",
        answer:
          "Да, у некоторых HTML элементов есть дефолтные специфичные стили, заданные браузером по умолчанию. Например, стандартный шрифт для абзацев, выравнивание для заголовков и т.д.",
      },
      {
        question: "Что такое семантика? Какие семантичные тэги вы знаете?",
        answer:
          "Семантика - это использование элементов с целью передачи дополнительной информации о смысле содержимого веб-страницы. Некоторые семантичные теги в HTML включают <header>, <footer>, <nav>, <article>, <section>, <aside>, <figure>, <figcaption> и другие.",
      },
      {
        question: "Как семантически правильно сверстать картинку с подписью?",
        answer:
          'Для семантически правильной верстки картинки с подписью можно использовать тег <figure> для обертки картинки и <figcaption> для подписи. Например: <figure><img src="image.jpg" alt="Описание изображения"><figcaption>Подпись к изображению</figcaption></figure>.',
      },
      {
        question: "Типы списков в HTML?",
        answer:
          'В HTML существуют три основных типа списков: маркированные (<ul>), нумерованные (<ol>) и списки определений (<dl>), которые используются для различных целей и структурирования содержимого. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://ru.w3docs.com/uchebnik-html/html-spiski.html)</sup> <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[4](https://skillbox.ru/media/code/vyerstka-htmlspiskov-dlya-nachinayushchikh/)</sup> ',
      },
      {
        question: "Для какого тэга используется атрибут alt и зачем он нужен?",
        answer:
          'Атрибут alt используется в теге <img> для предоставления альтернативного текста изображениям. Этот атрибут критически важен для доступности, так как он описывает содержание и функцию изображения для пользователей, которые не могут его увидеть. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://www.w3docs.com/learn-html/html-alt-attribute.html)</sup> ',
      },
      {
        question: "Какая разница между тэгами <strong><em> и <b><i>?",
        answer:
          'Теги <strong> и <em> обозначают семантически важное выделение текста (обычно жирное и курсивное соответственно), в то время как <b> и <i> используются для стилизации текста (жирное и курсивное соответственно) без присвоения семантического значения. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://ru.w3docs.com/uchebnik-html/html-spiski.html)</sup> ',
      },
      {
        question: "Типы <input> элементов в HTML?",
        answer:
          'В HTML существует несколько типов элементов <input>, такие как текстовое поле (<input type="text">), поле ввода пароля (<input type="password">), флажок (<input type="checkbox">), кнопка (<input type="button">), радиокнопка (<input type="radio">) и другие. Каждый тип предоставляет различные варианты взаимодействия с пользователем. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://skillbox.ru/media/code/vyerstka-htmlspiskov-dlya-nachinayushchikh/)</sup> ',
      },
      {
        question: "Для чего используют data-атрибуты?",
        answer:
          'Атрибуты data- используются для хранения пользовательских данных в HTML, которые могут быть использованы JavaScript и CSS для повышения функциональности и стилизации без необходимости добавления лишних атрибутов к HTML-элементам. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://skillbox.ru/media/code/vyerstka-htmlspiskov-dlya-nachinayushchikh/)</sup> ',
      },
      {
        question: "Разница между <script>, <script async> и <script defer>?",
        answer:
          'Тег <script> позволяет добавлять скрипты на веб-страницу. Разница между <script>, <script async> и <script defer> заключается в моменте загрузки и выполнения скрипта. <script> загружается и выполняется синхронно, блокируя параллельную загрузку веб-страницы. <script async> загружается асинхронно, не блокируя загрузку страницы, и выполняется после загрузки. <script defer> также загружается асинхронно, но выполняется после завершения парсинга документа. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[10](https://www.w3docs.com/learn-html/html-alt-attribute.html)</sup> ',
      },
      {
        question: "Для чего используется элемент <datalist>?",
        answer:
          'Элемент <datalist> используется для предоставления контекстного соответствия ввода данных через элемент <input> типа "text". Он содержит варианты или подсказки для значений, которые могут быть выбраны пользователем. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://skillbox.ru/media/code/vyerstka-htmlspiskov-dlya-nachinayushchikh/)</sup> ',
      },
      {
        question:
          "Почему хорошей практикой считается располагать <link> для подключения CSS стилей внутри тэга <head>, а <script> для подключения JS ставить перед закрывающимся тэгом </body>?",
        answer:
          'Расположение тега <link> для стилей CSS внутри тега <head> позволяет браузерам заранее загрузить стили и отобразить страницу с правильным оформлением. Помещение тега <script> перед закрывающим тегом </body> позволяет странице загрузиться и отобразить содержимое загрузкой и выполнением скриптов, что повышает производительность и улучшает пользовательский опыт. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[10](https://css-tricks.com/when-to-use-svg-vs-when-to-use-canvas/)</sup> ',
      },
      {
        question: "Что такое мета-тэги?",
        answer:
          'Мета-теги - это специальные элементы HTML, которые предоставляют дополнительную информацию о веб-странице. Они не отображаются на странице, но используются для управления и описания содержимого страницы, включая метаданные, ключевые слова, описание страницы, указания на стили и многое другое. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[2](https://www.w3schools.com/html/html5_svg.asp)</sup> ',
      },
      {
        question: "Что описывается в тэге <head>?",
        answer:
          'Тег <head> описывает информацию о документе HTML, которая не отображается на самой странице, но важна для браузера и поисковых систем. Внутри тега <head> могут находиться мета-теги, ссылки на внешние ресурсы, титульный текст, стили, скрипты и другие метаданные. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[2](https://www.w3schools.com/html/html5_svg.asp)</sup> ',
      },
      {
        question: "Для чего используются тэги <tr>, <th>, <td>?",
        answer:
          'Тег <tr> используется для создания строки в таблице, <th> - для создания ячейки заголовка таблицы, а <td> - для создания ячейки данных в таблице. Совместное использование этих тегов позволяет создавать структурированные и информативные таблицы на веб-страницах. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://www.geeksforgeeks.org/difference-between-svg-and-html-5-canvas/)</sup> ',
      },
      {
        question: 'Расскажите о meta-теге с name="viewport"?',
        answer:
          'Мета-тег <meta> с атрибутом name="viewport" используется для адаптивной верстки и управления масштабированием на мобильных устройствах. Этот тег позволяет контролировать ширину видимой области страницы и масштабирование содержимого в браузере мобильного устройства. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[2](https://www.w3schools.com/html/html5_svg.asp)</sup> ',
      },
      {
        question: "Что такое элемент <canvas>? И для чего он используется?",
        answer:
          'Элемент <canvas> в HTML используется для рисования графики на веб-странице с использованием JavaScript. <canvas> представляет собой пустой холст, на котором можно создавать динамические графические элементы, анимации и игры. Он обычно используется для создания интерактивных визуальных элементов. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://www.geeksforgeeks.org/difference-between-svg-and-html-5-canvas/)</sup> ',
      },
      {
        question: "Что такое <svg> и <canvas>?",
        answer:
          'Элемент <svg> используется для рисования векторной графики на веб-страницах с помощью XML-описания, а <canvas> используется для рендеринга растровой графики на холсте, используя JavaScript. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://coderlessons.com/articles/veb-razrabotka-articles/canvas-vs-svg-vybor-pravilnogo-instrumenta-dlia-raboty)</sup> ',
      },
      {
        question: "Разница между <canvas> и <svg>?",
        answer:
          'Основное различие между <canvas> и <svg> заключается в том, что <canvas> работает с пикселями и использует растровую модель для рисования, тогда как <svg> использует векторную модель и математические описания для создания графики. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://stackoverflow.com/questions/4996374/what-is-the-difference-between-svg-and-html5-canvas)</sup> ',
      },
      {
        question:
          "В каких случаях лучше использовать <canvas>, а в каких <svg>?",
        answer:
          'Элемент <canvas> лучше использовать для создания интерактивной растровой графики, как в играх, тогда как <svg> подходит для векторной графики, такой как иконки, диаграммы. <svg> также лучше подходит для масштабирования. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://stackoverflow.com/questions/4996374/what-is-the-difference-between-svg-and-html5-canvas)</sup> <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://coderlessons.com/articles/veb-razrabotka-articles/canvas-vs-svg-vybor-pravilnogo-instrumenta-dlia-raboty)</sup> ',
      },
      {
        question: "Плюсы и минусы <canvas> и <svg>?",
        answer:
          'Для <canvas> плюсы включают гибкость и возможность работы с растровой графикой, но минусы в отсутствии масштабируемости и сложности в работе. Для <svg> плюсы - масштабируемость и простота использования, но минусы в производительности для сложной графики. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://stackoverflow.com/questions/4996374/what-is-the-difference-between-svg-and-html5-canvas)</sup> <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://coderlessons.com/articles/veb-razrabotka-articles/canvas-vs-svg-vybor-pravilnogo-instrumenta-dlia-raboty)</sup> ',
      },
      {
        question: "Для чего нужен атрибут autocomplete?",
        answer:
          'Атрибут autocomplete используется для указания браузеру, должен ли он предоставлять подсказки и автозаполнение для полей формы на веб-странице. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://coderlessons.com/articles/veb-razrabotka-articles/canvas-vs-svg-vybor-pravilnogo-instrumenta-dlia-raboty)</sup> ',
      },
      {
        question: "Что такое элемент <output> в HTML5?",
        answer:
          'Элемент <output> используется для отображения результатов вычислений или операций, таких как результаты формул или JavaScript-вычислений, на веб-странице. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://coderlessons.com/articles/veb-razrabotka-articles/canvas-vs-svg-vybor-pravilnogo-instrumenta-dlia-raboty)</sup> ',
      },
      {
        question: "Что такое свойство valueAsNumber?",
        answer:
          'Свойство valueAsNumber используется для получения числового значения из элемента <input> с типом "number". Оно преобразует введенное пользователем значение в числовой формат. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://coderlessons.com/articles/veb-razrabotka-articles/canvas-vs-svg-vybor-pravilnogo-instrumenta-dlia-raboty)</sup> ',
      },
      {
        question: "Что такое атрибут target? Какие значения он принимает?",
        answer:
          'Атрибут target определяет, в каком окне или на каком фрейме открывать ссылку. Он может принимать значения, такие как _self, _blank, _parent, _top и имена фреймов. Например, target="_blank" открывает ссылку в новом окне. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://coderlessons.com/articles/veb-razrabotka-articles/canvas-vs-svg-vybor-pravilnogo-instrumenta-dlia-raboty)</sup> ',
      },
      {
        question: "Что такое ApplicationCache в HTML5?",
        answer:
          'ApplicationCache в HTML5 позволяет веб-приложениям кэшировать и предоставлять доступ к ресурсам без подключения к интернету, позволяя пользователям использовать приложение в автономном режиме. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[5](https://www.geeksforgeeks.org/what-is-the-application-cache-and-why-it-is-used-in-html5/)</sup> ',
      },
      {
        question: "Для чего используется элемент <picture>?",
        answer:
          'Элемент <picture> используется для создания адаптивных изображений, которые помогают сайту подстраиваться под различные размеры и разрешения экранов, обеспечивая более эффективное и оптимальное отображение изображений на веб-странице. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[3](https://webdesign.tutsplus.com/quick-tip-how-to-use-html5-picture-for-responsive-images--cms-21015t)</sup> ',
      },
      {
        question: "Что такое srcset? Как работает srcset?",
        answer:
          'Атрибут srcset - это атрибут элемента <img>, который позволяет указать несколько изображений разных размеров и разрешений. Браузер выбирает изображение из набора, которое лучше подходит для отображения на конкретном устройстве, достигая более точной и гибкой адаптивности. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[3](https://webdesign.tutsplus.com/quick-tip-how-to-use-html5-picture-for-responsive-images--cms-21015t)</sup> ',
      },
      {
        question: "Как семантически верно сверстать навигационное меню?",
        answer:
          'Семантически верное свертывание навигационного меню включает использование элементов <nav> для обозначения навигационной области, списков <ul> or <ol> для разметки пунктов меню, элементов <li> для представления отдельных пунктов меню, и соответственно ссылок <a> для перехода по разделам сайта. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://webplatform.github.io/docs/tutorials/appcache_beginner/)</sup> ',
      },
      {
        question: "Что такое <iframe>?",
        answer:
          'Элемент <iframe> используется для вставки веб-страницы внутрь другой веб-страницы. Он позволяется встраивать отдельные веб-страницы на основную страницу, что широко используется для встраивания контента, виджетов, карт и других элементов. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[2](https://github.com/YauhenKavalchuk/interview-questions/blob/main/questions/html.md)</sup> ',
      },
      {
        question: "Для чего используются тэги <sub> и <sup>?",
        answer:
          'Тег <sub> используется для отображения текста в виде индекса снизу, а <sup> - в виде индекса сверху. Они часто используются для математических формул, химических формул или сносок для представления информации в компактной и понятной форме. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[2](https://github.com/YauhenKavalchuk/interview-questions/blob/main/questions/html.md)</sup> ',
      },
      {
        question: "Как можно скрыть элемент разметки не используя CSS и JS?",
        answer:
          'Элемент разметки можно скрыть без использования CSS и JS, установив для него атрибут hidden. Например, <p hidden>Текст, который нужно скрыть</p> скроет указанный абзац. Однако, использование hidden допускается только для некоторых тегов, и его поддержка зависит от браузера. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://webplatform.github.io/docs/tutorials/appcache_beginner/)</sup> ',
      },
      {
        question: "Разница между <meter> и <progress>?",
        answer:
          'Разница между <meter> и <progress> заключается в их предназначении и способе использования. Элемент <meter> используется для отображения значения в пределах известного диапазона, например, объема батареи. В то время как <progress> используется для отображения прогресса выполнения задачи или процесса. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://webplatform.github.io/docs/tutorials/appcache_beginner/)</sup> ',
      },
      {
        question: "Как можно сгруппировать опции внутри тэга <select>?",
        answer:
          'Опции внутри тега <select> можно сгруппировать с помощью тега <optgroup>. Тег <optgroup> используется для создания групп опций внутри элемента <select>, что позволяет логически сгруппировать выборы. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://doka.guide/html/optgroup/)</sup> ',
      },
      {
        question: "Как можно изменить форму картинки или HTML элемента?",
        answer:
          'Форму картинки или HTML элемента можно изменить с помощью CSS, используя свойства, такие как form, transform, shape-outside для изменения формы элемента. Также, для элементов формы, форма может быть изменена с помощью атрибута shape в области изображения или с помощью атрибута type для формы. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://github.com/YauhenKavalchuk/interview-questions/blob/main/questions/html.md)</sup> ',
      },
      {
        question: "Чем отличается <article> от <section>?",
        answer:
          'Элемент <article> обозначает автономный контент, который может быть переиспользован независимо от остального контента на странице, в то время как элемент <section> используется для логического разделения содержимого на странице. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://github.com/YauhenKavalchuk/interview-questions/blob/main/questions/html.md)</sup> ',
      },
      {
        question: "Расскажите об особенностях стилизации <svg>?",
        answer:
          'При стилизации <svg> могут использоваться CSS, а также атрибуты элементов <svg>, такие как fill, stroke, stroke-width для определения цвета, контура и ширина обводки. Кроме того, <svg> поддерживает применение фильтров, масок, градиентов и трансформаций. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://github.com/YauhenKavalchuk/interview-questions/blob/main/questions/html.md)</sup> ',
      },
      {
        question: "Разница между кнопкой и ссылкой в HTML?",
        answer:
          'В HTML кнопка (<button>) используется для запуска действия на веб-странице, такого как отправка формы, в то время как ссылка (<a>) используется для перехода на другую страницу или ресурс. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://github.com/YauhenKavalchuk/interview-questions/blob/main/questions/html.md)</sup> ',
      },
      {
        question: "Для чего используется атрибут decoding?",
        answer:
          'Атрибут decoding устанавливается для элементов <img> и позволяет указать браузеру, как следует декодировать изображение при загрузке. Он может принимать значения async, auto и sync. Например, decoding="async" говорит браузеру, что изображение может быть декодировано асинхронно, что ускоряет загрузку страницы. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://doka.guide/html/optgroup/)</sup> ',
      },
      {
        question: "Для чего используется атрибут enterkeyhint?",
        answer:
          'Атрибут enterkeyhint используется для указания браузеру, как следует интерпретировать назначение клавиши Enter в поле ввода. Он позволяет веб-разработчикам задавать контекстную клавишу Enter для полей ввода, таких как "search" или "send". <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://doka.guide/html/optgroup/)</sup> ',
      },
      {
        question: "Для чего используют атрибут novalidate?",
        answer:
          'Атрибут novalidate применяется к элементу <form> и используется для отключения встроенной валидации браузера для формы, что позволяет отправлять форму на сервер без предварительной валидации в браузере. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://doka.guide/html/optgroup/)</sup> ',
      },
      {
        question: "Для чего используют атрибут inputmode?",
        answer:
          'Атрибут inputmode предоставляет подсказку браузеру о типе данных, который ожидается для ввода в поле формы. Например, значение "numeric" указывает, что ожидается числовой ввод, тогда как "email" указывает на ввод email-адреса. Это помогает браузеру выбирать соответствующую клавиатуру на мобильных устройствах. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[1](https://www.w3schools.com/tags/att_inputmode.asp)</sup> <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[2](https://css-tricks.com/everything-you-ever-wanted-to-know-about-inputmode/)</sup> ',
      },
      {
        question: "Для чего используется атрибут pattern?",
        answer:
          'Атрибут pattern в HTML используется для определения шаблона, который должно соответствовать введенное значение в поле формы. Это позволяет настраивать валидацию данных на стороне клиента, например, для ввода телефонного номера, почтового индекса или других форматов. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://developer.mozilla.org/ru/docs/Web/HTML/Attributes/pattern)</sup> ',
      },
      {
        question: 'Что такое и зачем нужен атрибут rel="nofollow” в HTML?',
        answer:
          'Атрибут rel="nofollow" в HTML используется для указания поисковым системам игнорировать ссылку при индексации страницы. Это помогает предотвратить передачу "кредита" внешних ссылок с вашего сайта на другие сайты. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[7](https://www.webfx.com/blog/web-design/rel-nofollow/)</sup> ',
      },
      {
        question: "Почему стоит использовать семантические теги в верстке?",
        answer:
          'Семантические теги в HTML помогают улучшить доступность, SEO-оптимизацию и общую структуру веб-страницы, делая код более понятным и читаемым для разработчиков и роботов поисковых систем. Помимо этого, они облегчают использование вспомогательных технологий, таких как скринридеры. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://www.w3schools.com/tags/att_inputmode.asp)</sup> ',
      },
      {
        question: "Для чего используется тэг <label>?",
        answer:
          'Тег <label> используется для создания элемента метки, который ассоциирует текстовую метку с элементом формы, таким как поле ввода. Это улучшает удобство использования форм для пользователей и обеспечивает более точное понимание содержания формы и связанных элементов. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://developer.mozilla.org/ru/docs/Web/HTML/Attributes/pattern)</sup> ',
      },
      {
        question:
          "Способы улучшения производительности веб-страницы при использовании HTML?",
        answer:
          'Некоторые методы улучшения производительности веб-страницы при использовании HTML включают минимизацию и оптимизацию размера изображений, удаление неиспользуемого кода и файлов, использование кеширования ресурсов, асинхронную загрузку скриптов и стилей, а также использование семантически правильной разметки для улучшения доступности и SEO. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://www.w3schools.com/tags/att_inputmode.asp)</sup> ',
      },
      {
        question:
          "Основные атрибуты HTML-форм? Как они влияют на отправку данных с веб-страницы?",
        answer:
          'Некоторые из основных атрибутов HTML-форм включают action, method, enctype, autocomplete, target и novalidate. Атрибуты HTML-форм контролируют различные аспекты отправки данных, такие как адрес, метод, формат кодирования, автозаполнение, окно получателя и валидацию формы. Например, атрибут action устанавливает адрес для отправки данных, method определяет метод передачи данных (GET или POST), enctype определяет тип кодирования данных. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://developer.mozilla.org/ru/docs/Web/HTML/Element/form)</sup> ',
      },
      {
        question:
          "Какие HTML-элементы используются для создания и форматирования таблиц? Какие атрибуты у них есть?",
        answer:
          'Для создания и форматирования таблиц в HTML используются элементы <table> для определения таблицы, <tr> для строк, <th> для заголовков и <td> для ячеек. Некоторые атрибуты для этих элементов включают colspan и rowspan для объединения ячеек, scope для заголовков ячеек, и summary для общего описания таблицы. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[6](https://proglib.io/p/study_html_forms)</sup> ',
      },
      {
        question: "Расскажите о тэге <samp>?",
        answer:
          'Тег <samp> используется для отображения образцов кода или вывода компьютерных программ, который представляет результат вывода программы. Этот тег часто используется для визуализации текста, который является выводом из программного обеспечения, например, команд в командной строке. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[9](https://developer.mozilla.org/ru/docs/Web/HTML/Attributes)</sup> ',
      },
      {
        question: "Для чего используется атрибут capture?",
        answer:
          'Атрибут capture используется с элементами для загрузки медиа-файлов, таких как <input type="file"> или <input type="image">, для указания и управления механизмом захвата медиа, таким как камера или микрофон на мобильных устройствах. Это атрибут позволяет контролировать, каким образом данные будут захватываться при использовании формы для загрузки медиа-файлов. <sup className="rounded-full text-xs cursor-pointer [&>*]:!text-white h-4 w-4 px-1 bg-zinc-400 hover:bg-zinc-500 dark:bg-zinc-700 hover:dark:bg-zinc-600">[8](https://developer.mozilla.org/ru/docs/Web/HTML/Element/form)</sup> ',
      },
    ],
  },
  {
    header: "CSS (вопросы по каскадным таблицам стилей)",
    questions: [
      {
        question: "Что такое CSS? И для чего он используется?",
        answer:
          "CSS (Cascading Style Sheets) - это формальный язык описания внешнего вида веб-страниц; каскадные таблицы стилей (Cascade Style Sheets). Он используется для определения стилей и макетов элементов HTML на веб-странице, что позволяет управлять оформлением и внешним видом контента.",
      },
      {
        question: "Что такое CSS-правило?",
        answer:
          "CSS-правило состоит из селектора и объявлений, которые определяют, как отображать выбранные элементы.",
      },
      {
        question: "Варианты добавление CSS стилей на страницу?",
        answer:
          "Варианты добавления CSS стилей на страницу включают внедрение стилей непосредственно в HTML с помощью атрибута style, подключение внешнего файла стилей с помощью тега link, и добавление стилей с помощью JavaScript.",
      },
      {
        question: "Типы позиционирования в CSS?",
        answer:
          "Типы позиционирования в CSS включают static, relative, fixed, absolute и sticky.",
      },
      {
        question: "Блочная модель CSS?",
        answer:
          "Блочная модель CSS определяет то, как элементы будут отображаться в документе, включая размеры и позиционирование, в представлении как блоки, состоящие из контента и обрамляющих их областей с отступами, границами и полями.",
      },
      {
        question: "Что такое селектор? И какие селекторы существуют?",
        answer:
          "Селектор - это паттерн, который используется для выбора элементов, к которым применяются стили. Существуют различные виды селекторов, такие как элементарные селекторы, идентификаторы, классы, атрибуты, псевдоклассы, псевдоэлементы и комбинаторы.",
      },
      {
        question:
          "Что такое специфичность селектора? Как считать вес селектора?",
        answer:
          "Специфичность селектора в CSS - это метод определения, какой стиль будет применен к элементу, если есть конфликтующие стили. Вес селектора измеряется в соответствии с комбинацией элементарных селекторов, идентификаторов и классов.",
      },
      {
        question: "Разница между Reset.css и Normalize.css?",
        answer:
          "Reset.css и Normalize.css - это два известных подхода к созданию единой основы для стилей веб-страниц. Reset.css удаляет все стандартные стили браузера, тогда как Normalize.css сохраняет полезные стандартные стили. Normalize.css пытается исправить различия между браузерами, обеспечивая более унифицированный старт для стилей.",
      },
      {
        question: "Разница между margin и padding?",
        answer:
          "Margin используется для создания отступа вокруг элемента и отделяет его от других элементов, в то время как padding используется для создания внутренних отступов вокруг содержимого элемента, отделяя его содержимое от границы элемента.",
      },
      {
        question: "Разница между display: none и visibility: hidden?",
        answer:
          "Использование display: none скрывает элемент так, что он не занимает места в макете и не участвует в его отображении, в то время как visibility: hidden скрывает элемент, но он по-прежнему занимает место в макете.",
      },
      {
        question: "Разница между блочным и строчным (инлайновым) элементами?",
        answer:
          "Блочные элементы занимают всю доступную ширину и начинаются с новой строки, в то время как строчные (инлайновые) элементы занимают только необходимую ширину и не начинаются с новой строки, они соседствуют с другими элементами в том же ряду.",
      },
      {
        question: "Разница между классом и идентификатором в CSS?",
        answer:
          "Класс в CSS начинается с точки (.) и может использоваться несколько раз на странице, в то время как идентификатор начинается с решетки (#) и должен быть уникальным на странице.",
      },
      {
        question: "Что такое CSS спрайт? И для чего он используется?",
        answer:
          "CSS спрайт - это метод комбинирования множества изображений в одно изображение, что позволяет уменьшить количество запросов к серверу и улучшить производительность загрузки страницы.",
      },
      {
        question: "Что такое вендорные префиксы? И для чего они используются?",
        answer:
          "Вендорные префиксы - это префиксы, добавляемые к свойствам CSS для обеспечения поддержки экспериментальных или специфических для браузера свойств, пока они не станут частью официального стандарта.",
      },
      {
        question: "Что такое псевдоэлементы? И для чего они используются?",
        answer:
          "Псевдоэлементы в CSS используются для добавления стилизованного контента к элементам, не изменяя сам HTML-кода. Они позволяют создавать различные эффекты, такие как добавление предупреждения, создание декоративных элементов и многое другое.",
      },
      {
        question: "Что такое схлопывание границ (margin collapsing)?",
        answer:
          "Схлопывание границ (margin collapsing) происходит, когда верхний и нижний отступы двух элементов соприкасаются, в результате чего они не суммируются, а берется наибольший из двух отступов.",
      },
      {
        question: "Что такое CSS препроцессор?",
        answer:
          "CSS-препроцессор - это программа, которая имеет собственный синтаксис, но может сгенерировать из него CSS код. Он расширяет возможности чистого CSS, делая его более динамичным и обеспечивая удобство в поддержке больших и сложных таблиц стилей.",
      },
      {
        question: "Что такое z-index? Как формируется контекст наложения?",
        answer:
          "z-index - это CSS свойство, которое определяет порядок наложения позиционированных элементов. Значение z-index формирует контекст наложения элемента. Новый контекст образуется, если элемент позиционирован абсолютно или относительно и имеет свойство z-index, значение которого отлично от auto.",
      },
      {
        question: "Порядок наложения элементов в CSS (Stacking Order)?",
        answer:
          "Порядок наложения элементов в CSS определяется с использованием z-index. Элементы с более высоким значением z-index будут находиться поверх элементов с более низким z-index. При этом создается локальный контекст наложения для элементов с определенным z-index, таким образом значения z-index дочерних элементов внутри этого контекста не будут сравниваться со значениями z-index элементов за его пределами.",
      },
      {
        question:
          "Как с помощью CSS определить, поддерживается ли свойство в браузере?",
        answer:
          "Для определения поддержки свойства в браузере можно использовать CSS-свойство @supports, которое проверяет, поддерживается ли указанное свойство в текущем браузере, позволяя применять стили при выполнении определенного условия.",
      },
      {
        question:
          "Как поддерживать страницы в браузерах с ограниченными функциями?",
        answer:
          "Для поддержки страниц в браузерах с ограниченными функциями можно использовать прогрессивное улучшение, при котором страница сначала создается для базовых устройств и браузеров, а затем добавляются дополнительные усовершенствования для более продвинутых устройств и браузеров.",
      },
      {
        question:
          "Как исправлять специфичные проблемы со стилями для разных браузеров?",
        answer:
          "Специфичные проблемы со стилями для разных браузеров можно исправить с помощью вендорных префиксов, используя специфические CSS-свойства и стили, которые поддерживаются определенными браузерами, и тестирования на различных платформах и устройствах.",
      },
      {
        question: "Глобальные ключевые слова в CSS?",
        answer:
          "Глобальные ключевые слова в CSS - это ключевые слова, которые имеют одно и то же значение в любом контексте, включая auto, initial, inherit, unset, revert.",
      },
      {
        question: "Что такое CSS-атрибут (attr)?",
        answer:
          "CSS-атрибут (attr) - это функция, которая позволяет получить значение HTML-атрибута и использовать его в CSS для создания содержимого псевдоэлементов или установки значений свойств на основе HTML-структуры.",
      },
      {
        question: "Что такое перечисление селекторов?",
        answer:
          "Перечисление селекторов в CSS представляет собой комбинацию нескольких селекторов, разделенных запятыми, чтобы применять стили к нескольким элементам одновременно.",
      },
      {
        question: "Для чего используется ключевое слово currentColor в CSS?",
        answer:
          "Ключевое слово currentColor в CSS используется для определения цвета как текущий цвет текста, унаследованный от свойства color, что позволяет создавать стили, которые зависят от основного цвета текста.",
      },
      {
        question: "Какие псевдоклассы были добавлены в CSS3?",
        answer:
          "Некоторые псевдоклассы, добавленные в CSS3, включают :nth-child, :nth-of-type, :last-child, :first-of-type, :last-of-type, :hover, :focus, :checked, :disabled, :target и многие другие.",
      },
      {
        question: "Какие фильтры есть в CSS?",
        answer:
          "В CSS есть различные фильтры, такие как blur(), brightness(), contrast(), drop-shadow(), grayscale(), hue-rotate(), invert(), opacity(), saturate(), sepia() и многие другие, которые позволяют изменять визуальное отображение элементов.",
      },
      {
        question: "Для чего используется псевдокласс :invalid?",
        answer:
          "Псевдокласс :invalid в CSS используется для выбора элементов формы, которые имеют недопустимое значение, например, если пользователь отправил форму с неправильно заполненным обязательным полем.",
      },
      {
        question: "Расскажите про свойство display в CSS?",
        answer:
          "Свойство display в CSS определяет, как элемент должен быть отображен на веб-странице. Оно контролирует тип и поведение элемента, позволяя скрывать, отображать, или изменять его визуальное представление.",
      },
      {
        question:
          "В каком случае лучше использовать translate() вместо абсолютного позиционирования?",
        answer:
          "Лучше использовать translate() в CSS, когда требуется перемещать элемент внутри его собственного потока или приложения анимаций, так как translate() предлагает более эффективный способ перемещения элементов без нарушения потока документа, чем абсолютное позиционирование.",
      },
      {
        question: "Что такое плавающие элементы (floats)? Как они работают?",
        answer:
          "Плавающие элементы (floats) в CSS позволяют выравнивать элементы по левому или правому краю контейнера, что позволяет тексту обтекать эти элементы. Элементы, подверженные float, удаляются из нормального потока документа, но по-прежнему остаются частью документа. Floats образуют свою собственную область, в которой текст может обтекать элементы с помощью clear или через другие float-элементы. Плавающие элементы можно использовать для создания сложных макетов.",
      },
      {
        question: "Расскажите о свойстве text-rendering?",
        answer:
          "Свойство text-rendering в CSS позволяет определить режим сглаживания текста и оптимизацию его отрисовки. Значения text-rendering контролируют, как браузер или движок рендеринга обрабатывают отображение текста, определяя четкость и качество отрисовки.",
      },
      {
        question: "Расскажите о свойстве text-decoration-skip-ink?",
        answer:
          "Свойство text-decoration-skip-ink в CSS используется для контроля того, как подчеркивание текста и другие декоративные линии пересекаются с символами, обеспечивая лучшее визуальное представление текста с учетом особенностей шрифтов и декораций.",
      },
      {
        question: "Расскажите о свойстве pointer-events?",
        answer:
          "Свойство pointer-events в CSS определяет, как элемент реагирует на указательный сигнал мыши. Оно контролирует, может ли элемент быть целью событий мыши, таких как щелчок или наведение курсора, или же должен ли он быть проигнорирован.",
      },
      {
        question: "Расскажите о свойстве outline?",
        answer:
          "Свойство outline в CSS используется для добавления контура вокруг элементов без изменения их размеров или расположения в документе. Он обычно используется для выделения элементов при навигации с клавиатуры и в качестве визуального фокуса.",
      },
      {
        question: "Расскажите о свойстве scrollbar-gutter?",
        answer:
          "Свойство scrollbar-gutter в CSS позволяет контролировать расстояние между содержимым элемента и его прокруткой, обеспечивая более точное и гибкое управление отображением контента в окне с прокруткой.",
      },
      {
        question: "Почему не стоит использовать краткую запись свойств CSS?",
        answer:
          "Использование краткой записи свойств CSS может сделать код менее читаемым и усложнить его поддержку. Более развернутая запись свойств делает код понятнее и удобнее для последующего редактирования и обслуживания.",
      },
      {
        question: "Назовите псевдоэлементы для подсветки текста?",
        answer:
          "Псевдоэлементы для подсветки текста в CSS включают ::first-letter и ::first-line, которые позволяют стилизировать первую букву или первую строку текста соответственно.",
      },
      {
        question: "Способы задания цвета в CSS?",
        answer:
          'Способы задания цвета в CSS могут варьироваться в зависимости от целей и предпочтений, но основными методами являются использование названий цветов (например, "red", "blue"), RGB, RGBA, HEX-кодов, HSL и HSLA.',
      },
      {
        question:
          "Какие CSS-свойства используются для создания анимаций и плавных переходов?",
        answer:
          "Для создания анимаций и плавных переходов в CSS используются свойства, такие как `animation`, `transition`, `@keyframes`, `transition-property`, `animation-duration`, `transition-timing-function`, и другие свойства, специфичные для анимаций.",
      },
      {
        question:
          "Принципы и подходы для обеспечения масштабируемости и поддерживаемости CSS-кода?",
        answer:
          "Принципы и подходы для обеспечения масштабируемости и поддерживаемости CSS-кода включают в себя использование модульной структуры, организацию классов, применение многоразовых стилей, именование классов и компонентов с учетом их предназначения и независимости.",
      },
      {
        question: "Плюсы и минусы методологии БЭМ?",
        answer:
          "Плюсы методологии БЭМ включают в себя модульность, повторное использование кода, легкость в поддержке и расширении, а также чистоту и ясность стилей. Недостатки методологии БЭМ могут включать в себя избыточное количество классов и более длинное именование элементов и модификаторов.",
      },
      {
        question:
          "Какие CSS-препроцессоры вы знаете? Преимущества их использования?",
        answer:
          "Некоторые известные CSS-препроцессоры включают Sass, Less, Stylus. Преимущества их использования включают дополнительные функции, улучшенное организация кода, возможность создания переменных и миксинов, а также компиляция в обычный CSS.",
      },
      {
        question:
          "Какое CSS-свойство используется для изменения порядка отображения элементов на веб-странице без изменения их физического расположения в HTML-коде?",
        answer:
          "CSS-свойство `order` используется для изменения порядка отображения элементов на веб-странице без изменения их физического расположения в HTML-коде.",
      },
      {
        question: "Разница между псевдоклассами и псевдоэлементами?",
        answer:
          "Псевдоклассы используются для стилизации состояний элементов, таких как :hover, :active, :focus, :visited, в то время как псевдоэлементы используются для стилизации конкретных частей элементов, таких как ::before, ::after, ::first-line.",
      },
      {
        question:
          "Как создавать и поддерживать единый стиль CSS на больших проектах?",
        answer:
          "Для создания и поддержания единого стиля CSS на больших проектах используют модульные именованные классы, компонентный подход, методологии CSS, такие как БЭМ, а также системы дизайн-токенов для определения цветов, типографики, отступов, и других стилевых аспектов.",
      },
      {
        question:
          'Что такое "контейнерные запросы" (container queries)? Как они отличаются от медиазапросов (media queries)?',
        answer:
          "Контейнерные запросы (container queries) - это методология в CSS, которая позволяет применять стили к элементам в зависимости от характеристик их контейнера. Они отличаются от медиазапросов (media queries) тем, что медиазапросы смотрят на экран или устройство, в то время как контейнерные запросы ориентированы на размер и характеристики контейнера элемента.",
      },
      {
        question: "Расскажите о псевдоклассе :has()?",
        answer:
          "Псевдокласс :has() - это псевдокласс в CSS, который позволяет выбирать элемент, который содержит элемент, удовлетворяющий определенному селектору. Однако в данный момент псевдокласс :has() еще не полностью реализован в CSS, поэтому его поддержка ограничена.",
      },
      {
        question: "Расскажите о медиафункции prefers-reduced-motion?",
        answer:
          "Медиафункция prefers-reduced-motion в CSS используется для определения, установил ли пользователь на своем устройстве предпочтение по снижению анимации и движений на веб-страницах. Это важный аспект доступности веб-сайтов для людей с чувствительностью к движению.",
      },
      {
        question: "Что такое и как работает CSS Flexbox?",
        answer:
          "CSS Flexbox - это мощный механизм позиционирования элементов в CSS, который позволяет легко управлять их распределением, выравниванием и порядком в контейнере. Он обеспечивает эффективное и гибкое размещение элементов внутри контейнера вдоль главной оси в зависимости от доступного пространства.",
      },
      {
        question: "Расскажите о свойстве flex в контексте Flexbox?",
        answer:
          "Свойство flex в контексте Flexbox определяет, как элемент будет увеличиваться или уменьшаться, чтобы занять доступное пространство внутри контейнера Flexbox. Это свойство позволяет элементам гибко реагировать на изменения размеров контейнера.",
      },
    ],
  },
  {
    header: "JavaScript (вопросы по языку JavaScript)",
    questions: [
      {
        question: "Типы данных в JavaScript?",
        answer:
          "Типы данных в JavaScript включают в себя примитивные типы: string, number, boolean, null, undefined, symbol, и object, который включает в себя массивы, функции, объекты и другие типы.",
      },
      {
        question: "Разница между == и === (нестрогое/строгое равенство)?",
        answer:
          "Оператор == сравнивает значения с автоматическим приведением типов, в то время как оператор === сравнивает значения без приведения типов, что делает его более строгим. Рекомендуется использовать === для проверки равенства значений.",
      },
      {
        question: "Что такое Strict mode в JavaScript?",
        answer: `Strict mode - это режим, введенный в ECMAScript 5, который обеспечивает более строгую обработку ошибок, делает код безопаснее, устраняет некоторые недочеты и запрещает использование некоторых потенциально опасных конструкций.
          Отличия от non strict:
          - Неявная декларация переменных: В non-strict режиме можно использовать переменные, которые не были предварительно объявлены. В strict режиме это приведёт к выбросу ошибки ReferenceError 9 10 .
          - TODO Повторяющиеся имена параметров: В non-strict режиме функции могут иметь параметры с одинаковыми именами, но в strict режиме это приводит к ошибке синтаксиса 10 .
          - TODO Проблемы с with: Использование оператора with запрещено в strict режиме, так как он может затруднить оптимизацию кода 10 .
          - Изменение свойств: В non-strict режиме, попытка изменить не изначально изменяемое свойство (например, свойство объекта, определенное как writable: false) не вызывает ошибки. В strict режиме это приведет к исключению TypeError 9 10 .
          - Удаление свойств: В strict режиме нельзя удалять не настраиваемые свойства, в то время как в non-strict режиме такое действие просто ничего не делает 4 10 .
          - Безопасность this: В non-strict режиме значение this неявно преобразуется в глобальный объект если вызвана функция без контекста. В strict режиме значение this остаётся undefined, если вызов функции не имеет контекста 10 .
          - Запрещенные идентификаторы: В strict режиме имеются дополнительные зарезервированные слова для будущих версий JavaScript, такие как implements, interface, let, package и др., использование которых как имен переменных вызовет ошибку 10 .`,
      },
      {
        question: "Разница между function declaration и function expression?",
        answer:
          "Function declaration создает функцию, которая является доступной для вызова независимо от места объявления, в то время как function expression создает функцию как часть выражения и ее доступность определяется после выполнения этого выражения.",
      },
      {
        question: "Разница между null и undefined?",
        answer:
          "null обозначает отсутствие значения и используется явным образом, в то время как undefined обозначает отсутствие значения по умолчанию, не является явно заданным и появляется, когда переменная объявлена, но не инициализирована.",
      },
      {
        question: "Типы таймеров в JavaScript?",
        answer:
          "В JavaScript существуют три типа таймеров: setTimeout, setInterval и requestAnimationFrame TODO КАК ОН РАБОТАЕТ?. setTimeout используется для запуска функции через определенный интервал времени, setInterval для периодического выполнения функции, а requestAnimationFrame для запланированной анимации.",
      },
      {
        question: "Что такое поднятие (Hoisting)?",
        answer:
          "Поднятие (Hoisting) в JavaScript описывает поведение, когда объявления переменных и функций перемещаются в начало их области видимости до выполнения кода. Это позволяет использовать переменные и функции до их фактического объявления.",
      },
      {
        question: "Что такое область видимости (Scope)?",
        answer:
          "Область видимости (Scope) в JavaScript определяет доступность переменных и функций в коде. Глобальная область видимости охватывает всю программу, а локальная область видимости ограничена блоком кода, внутри функции или другой структуры.",
      },
      {
        question: "Разница между var, let и const?",
        answer:
          "var объявляет переменные с функциональной областью видимости и поднимается (hoisted), let объявляет блочную переменную, не поднимается и не может быть повторно объявлена, а const создает переменную, которая не может быть переопределена после инициализации.",
      },
      {
        question: "Что такое замыкание (Closure)?",
        answer: `Замыкание (Closure) в JavaScript - это функция, которая имеет доступ к своей лексической области видимости, даже после того как эта функция была возвращена из области видимости, где она была определена. Это позволяет сохранять доступ к переменным функции после завершения выполнения.
          Это функция (внутренняя) которая возвращается другой функцией (внешней) и запоминает её область видимости. Наиболее яркий пример - мемоизация`,
      },
      {
        question: "Что обозначает this в JavaScript?",
        answer:
          "Ключевое слово this в JavaScript ссылается на объект, из которого был вызван текущий код. Значение this зависит от того, как вызывается функция: в глобальной области видимости оно ссылается на глобальный объект, а в методах объекта на сам объект.",
      },
      {
        question: "Что такое функции высшего порядка (Higher Order Functions)?",
        answer:
          "Функции высшего порядка в JavaScript - это функции, которые могут принимать другие функции в качестве аргументов или возвращать функции в качестве результата. Они позволяют абстрагировать операции и работать с функциями как с данными. TODO ЗАЧЕМ НУЖНЫ, ПРИВЕСТИ ПРИМЕР",
      },
      {
        question:
          "Как превратить любой тип данных в булевый? Перечислите ложные значения в JS?",
        answer:
          'Для превращения любого типа данных в булевый значение в JavaScript используется приведение типов с помощью двойного отрицания: !!value. Ложными значениями в JS являются false, 0, "", null, undefined, NaN.',
      },
      {
        question: "Методы строк в JavaScript?",
        answer:
          "В JavaScript существует множество методов для работы со строками, такие как concat(), indexOf(), slice(), replace(), toUpperCase(), toLowerCase(), trim() и многие другие, которые позволяют манипулировать и извлекать данные из строк.",
      },
      {
        question: "Методы массивов в JavaScript?",
        answer:
          "Методы массивов в JavaScript включают такие методы как push(), pop(), shift(), unshift(), splice(), slice(), map(), filter(), reduce() и многие другие, которые позволяют изменять, добавлять, удалять и манипулировать элементами массива.",
      },
      {
        question: "Что такое чистая функция?",
        answer:
          "Чистая функция в программировании - это функция, которая возвращает результаты, зависящие только от переданных аргументов, без внешнего воздействия по типу побочных эффектов. Это означает, что она не изменяет состояние окружения и не зависит от глобальных переменных.",
      },
      {
        question: "Разница между .forEach() и .map()?",
        answer:
          "Основное различие между .forEach() и .map() в JavaScript заключается в том, что .forEach() выполняет предоставленную функцию один раз для каждого элемента массива и возвращает undefined, в то время как .map() также выполняет функцию для каждого элемента, но возвращает новый массив с преобразованными элементами на основе результатов вызова функции для каждого элемента. Таким образом, .map() позволяет преобразовать элементы массива и вернуть новый массив, в то время как .forEach() просто выполняет операцию над каждым элементом без изменения самого массива.",
      },
      {
        question: "Разница между .call(), .apply() и bind()?",
        answer:
          ".call(), .apply() и .bind() - это методы, позволяющие установить контекст (значение this) для функции в JavaScript. .call() и .apply() немедленно вызывают функцию, устанавливая контекст и передавая аргументы, причем различие между ними заключается в способе передачи аргументов (call - через список аргументов, apply - через массив аргументов), в то время как .bind() создает новую функцию с установленным контекстом, но не вызывает ее сразу. ",
      },
      {
        question: "Почему в JS функции называют объектами первого класса?",
        answer:
          "В JavaScript функции называют объектами первого класса из-за того, что функции в языке могут быть использованы точно так же, как и любые другие объекты. Они могут быть созданы и переданы в качестве аргументов другим функциям, возвращены из других функций, сохранены в переменных и структурах данных. Это означает, что функции в JavaScript обладают всеми свойствами и возможностями, свойственными другим объектам.",
      },
      {
        question: "Как определить наличие свойства в объекте?",
        answer:
          "Для определения наличия свойства в объекте в JavaScript можно воспользоваться оператором in, использовать метод hasOwnProperty(), и проверять у объекта соответствующее свойство, либо использовать метод Object.prototype.hasOwnProperty.call(obj, prop), чтобы избежать конфликтов с другими объектами, не имеющими метода hasOwnProperty. ",
      },
      {
        question: "Что такое IIFE?",
        answer:
          "IIFE (Immediately Invoked Function Expression) - это шаблон в JavaScript, который представляет собой функцию, которая определяется и немедленно вызывается прямо после определения. IIFE часто используется для создания локальной области видимости и избегания конфликтов имен в глобальной области. ",
      },
      {
        question: "Что такое псевдомассив arguments?",
        answer:
          "Псевдомассив arguments в JavaScript - это объект, похожий на массив, который содержит аргументы переданные функции при вызове. Он не является полноценным массивом, поэтому не имеет методов массивов, но выглядит как массив и содержит доступ к аргументам по индексу и свойству length. ",
      },
      {
        question: "Разница между host-объектами и нативными объектами?",
        answer:
          "Host-объекты предоставляются средой выполнения, например, браузером или Node.js, такие как window, XMLHttpRequest и другие. Нативные объекты - это стандартные глобальные объекты JavaScript, такие как String, Math, RegExp и другие. Host-объекты зависят от среды выполнения и могут различаться, в то время как нативные объекты непосредственно предоставляются самим JavaScript.",
      },
      {
        question: "Почему результат сравнения 2х объектов это false?",
        answer:
          "В JavaScript объекты сравниваются по ссылке, а не по их содержимому. Даже если два объекта имеют одинаковые свойства и значения, сравнение объектов вернет false, если это две разные ссылки на объект. Для сравнения содержимого объектов необходимо явным образом сравнивать их свойства и значения. [6] [7]",
      },
      {
        question:
          "Что такое прототипное наследование? Как создать объект без прототипа?",
        answer:
          'Прототипное наследование в JavaScript означает, что объекты могут наследовать свойства и методы других объектов через их прототипы. Для создания объекта без прототипа можно использовать метод Object.create(null), который создает объект без прототипа, либо просто создать пустой объект "{}", который также не будет иметь прототипа. TODO ПРОВЕРИТЬ БУДЕТ ЛИ ПРОСТО ПУСТОЙ ОБЪЕКТ ИМЕТЬ ПРОТОТИП',
      },
      {
        question:
          "Почему расширение нативных JavaScript-объектов это плохая практика?",
        answer:
          "Расширение нативных объектов JavaScript, таких как Object, Array и других, собственными методами или свойствами может привести к неожиданным побочным эффектам, конфликтам и ошибкам в программах, особенно при работе в больших командах или фреймворках. Это может затруднить сопровождение кода и привести к непредсказуемому поведению. ПРИМЕР: Допустим в будущем такой метод добавят в нативный объект. Будет конфликт",
      },
      {
        question: "Что такое NaN? Как определить, что значение равно NaN?",
        answer:
          'NaN (Not-a-Number) - это специальное значение в JavaScript, представляющее "не число". Для проверки, является ли значение равным NaN, используется функция isNaN(), но следует учитывать, что isNaN() может вернуть true не только для NaN, но также для строки, объекта и т.д. Более надежным способом является Number.isNaN(), который вернет true только для NaN. [1] [6]',
      },
      {
        question: "Что такое объектная обертка (Wrapper Objects)?",
        answer:
          "Объектные обертки (Wrapper Objects) - это объекты, создаваемые автоматически при обращении к примитивным типам данных в JavaScript, таким как строка, число и логическое значение. Эти объекты дают доступ к методам и свойствам соответствующих примитивных типов данных. Например, при обращении к строке как объекту, создается строковая обертка, позволяющая использовать методы для работы со строками. [1] [6]",
      },
      {
        question: "Как в JavaScript создать объект?",
        answer:
          "В JavaScript объект можно создать с помощью литерала объекта {key: value}, с использованием конструктора new Object() или с помощью метода Object.create(). Также объекты могут быть созданы через классы в синтаксисе ES6. [6] [7]",
      },
      {
        question: "Для чего используется ключевое слово new?",
        answer:
          "В JavaScript ключевое слово new используется для создания экземпляра объекта от конструктора, позволяя инициализировать новый объект с помощью конструктора. [2] [7]",
      },
      {
        question: "Операторы «И» и «ИЛИ» (&& и ||)?",
        answer:
          "Оператор && (логическое И) возвращает первый операнд, если он ложный (иначе возвращает второй операнд). Оператор || (логическое ИЛИ) возвращает первый операнд, если он истинный (иначе возвращает второй операнд). [6] [4]",
      },
      {
        question: "Для чего используется оператор двойного отрицания (!!)?",
        answer:
          "Оператор двойного отрицания (!!) в JavaScript часто используется для преобразования значения в логический тип. В частности, !! используется для явного приведения значений к типу Boolean. [3]",
      },
      {
        question: "Для чего используется оператор остатка (%)?",
        answer:
          "Оператор остатка (%) в JavaScript используется для получения остатка от деления одного числа на другое. Например, результат выражения 5 % 2 равен 1, так как при делении 5 на 2 получается остаток 1. [6]",
      },
      {
        question: "Как проверить, является ли значение массивом?",
        answer:
          'Для проверки, является ли значение массивом в JavaScript, можно воспользоваться методом Array.isArray(). Кроме того, можно также использовать определение типа с помощью оператора typeof и проверить на соответствие "object". [7]',
      },
      {
        question: "Как работает boxing/unboxing в JavaScript?",
        answer:
          "Boxing в JavaScript - это процесс преобразования примитивного типа данных в соответствующий объектный тип данных, а unboxing - это процесс обратного перевода объектного типа данных в примитивный. Например, когда примитивное значение преобразуется в объектную обертку (например, new Number(42)), это называется boxing. Обратное преобразование объекта в примитивное значение (например, Number(obj)) - это unboxing. [6]",
      },
      {
        question:
          "Что такое мемоизация? Реализуйте базовую логику функции для мемоизации?",
        answer: `Мемоизация в программировании - это техника оптимизации, которая заключается в сохранении результатов выполнения функции для предотвращения повторных вычислений при одинаковых входных данных. Ниже представлен пример базовой логики для функции мемоизации:
 
 function memoize(func) {
  const cache = {};
  return function(n) {
    if (n in cache) {
      return cache[n];
    } else {
      const result = func(n);
      cache[n] = result;
      return result;
    }
  };
 }
 [1]`,
      },
      {
        question: "Разница между оператором in и методом .hasOwnProperty()?",
        answer:
          "Основное различие между оператором in и методом .hasOwnProperty() в JavaScript заключается в следующем: оператор in возвращает true, если свойство находится в объекте или его прототипе, в то время как метод .hasOwnProperty() возвращает true только в случае, если свойство принадлежит самому объекту, игнорируя цепочку прототипов. [1] [2]",
      },
      {
        question:
          "Разница между глубокой (deep) и поверхностной (shallow) копиями объекта? Как сделать каждую из них?",
        answer:
          "Глубокая копия объекта создает новый объект и рекурсивно копирует все его вложенные объекты. Поверхностная копия же создает новый объект, копируя только ссылки на вложенные объекты. Для глубокой копии можно использовать JSON методы JSON.parse(JSON.stringify(obj)), для поверхностной - цикл по свойствам объекта и копирование их значений в новый объект. [9]",
      },
      {
        question:
          "Что такое цепочка вызовов функций (chaining)? Как реализовать такой подход?",
        answer:
          "Цепочка вызовов функций (chaining) - это подход в программировании, когда к объекту или результату вызова функции сразу применяются несколько методов в цепочке. Для реализации такого подхода каждый метод должен возвращать ссылку на объект, на котором он был вызван, позволяя вызывать следующий метод в цепочке. [4]",
      },
      {
        question: "Что такое необъявленная переменная?",
        answer:
          "Необъявленная переменная в JavaScript - это переменная, на которую происходит обращение, но которая не была предварительно объявлена с использованием ключевого слова var, let или const. При обращении к необъявленной переменной она становится глобальной и может привести к нежелательным эффектам. [9]",
      },
      {
        question:
          "Как передаются параметры в функцию: по ссылке или по значению?",
        answer:
          "В JavaScript параметры примитивных типов передаются по значению, т.е. создается копия значения, а для объектов передается ссылка на объект. При изменении примитивного параметра в функции не меняется оригинальное значение, в то время как изменения объектов видны вне функции. [9]",
      },
      {
        question: "Что такое прототип объекта в JavaScript?",
        answer:
          "Прототип объекта в JavaScript - это механизм, позволяющий наследовать свойства и методы от других объектов. Каждый объект имеет свой прототип, который может быть другим объектом или null. Когда свойство не найдено в объекте, оно ищется в прототипе, и так далее вверх по цепочке прототипов. [3]",
      },
      {
        question: "Как работает метод Object.create()?",
        answer:
          "Метод Object.create() в JavaScript создает новый объект с указанным прототипом. Первым аргументом передается объект, который будет прототипом для нового создаваемого объекта. Этот метод позволяет явно указать прототип объекта при его создании. TODO СОЗДАТЬ, ПОСМОТРЕТЬ КАК БУДЕТ РАБОТАТЬ [6]",
      },
      {
        question: "Разниц мду Object.freeze() и Object.seal()?",
        answer:
          "Object.freeze() замораживает объект, делая его свойства неизменными, в то время как Object.seal() позволяет изменять значения существующих свойств, но не позволяет добавлять новые свойства или удалять существующие.",
      },
      {
        question: "Разница между методами .slice() и .splice()?",
        answer:
          "Метод .slice() создает новый массив, содержащий копии элементов из указанного диапазона, не изменяя исходный массив, в то время как метод .splice() изменяет исходный массив, удаляет или заменяет элементы и возвращает массив удаленных элементов.",
      },
      {
        question: "Как работают методы .find(), .findIndex() и .indexOf()?",
        answer:
          "Методы .find() и .findIndex() используются для поиска элементов в массиве по заданному условию. .find() возвращает первый найденный элемент, удовлетворяющий условию, .findIndex() возвращает индекс этого элемента, а метод .indexOf() возвращает индекс первого вхождения заданного элемента в массиве или -1, если элемент не найден.",
      },
      {
        question: "Плюсы и минусы использования use strict?",
        answer:
          "Использование 'use strict' позволяет писать более безопасный и строгий код, предотвращает некоторые ошибки, делает структуру кода более масштабируемой и улучшает производительность. Однако, это также может сделать код более сложным для написания и читаемости.",
      },
      {
        question:
          "Разница между методами .push(), .pop(), .shift() и .unshift()?",
        answer:
          "Методы .push() и .pop() используются для добавления и удаления элементов с конца массива, соответственно, а методы .shift() и .unshift() добавляют и удаляют элементы с начала массива.",
      },
      {
        question:
          "Плюсы и минусы иммутабельности? Как достичь иммутабельности в JS?",
        answer:
          "Иммутабельность означает, что данные не могут быть изменены после их создания. Плюсы включают безопасность данных, улучшенную отладку и предсказуемость программы, но одним из минусов является увеличение потребления памяти из-за создания новых версий данных. Для достижения иммутабельности в JS можно использовать библиотеки, такие как Immutable.js или Immer, или же использовать чистое функциональное программирование.",
      },
      {
        question: "Типы всплывающих окон в JavaScript?",
        answer:
          "Типы всплывающих окон в JavaScript включают в себя alert(), confirm() и prompt().",
      },
      {
        question: "Типы объектов JavaScript?",
        answer:
          "Типы объектов JavaScript включают в себя объекты, функции, массивы. TODO КАКИЕ ОНИ БЫВАЮТ",
      },
      {
        question: "Парадигмы программирования в JavaScript?",
        answer:
          "Парадигмы программирования в JavaScript включают в себя объектно-ориентированное программирование, функциональное программирование и императивное программирование. TODO В ЧЕМ ОТЛИЧИЕ",
      },
      {
        question: "Типы ошибок в JavaScript?",
        answer:
          "Типы ошибок в JavaScript включают в себя синтаксические ошибки, ошибки времени выполнения (runtime errors) и логические ошибки. TODO ПРИВЕСТИ ПРИМЕРЫ",
      },
      {
        question: "Разница между typeof и instanceof? ",
        answer:
          "Оператор typeof используется для определения типа данных переменной, в то время как оператор instanceof проверяет, является ли объект экземпляром определенного класса. TODO ПРИВЕСТИ ПРИМЕР",
      },
      {
        question: "JavaScript статически, или динамически типизированный язык?",
        answer:
          "JavaScript является динамически типизированным языком, так как тип переменной определяется во время выполнения программы, а не на этапе компиляции.",
      },
      {
        question: "Что такое регулярное выражение (Regular Expression)?",
        answer:
          "Регулярное выражение - это шаблон для поиска и сопоставления текста в строке. Оно широко используется для работы с текстовыми данными, поиска, замены и валидации.",
      },
      {
        question: "Что такое рекурсия?",
        answer:
          "Рекурсия - это прием программирования, при котором функция вызывает саму себя внутри своего тела. Рекурсия часто используется для решения задач, которые могут быть разделены на более простые подзадачи.",
      },
      {
        question: "Что такое прототип (Prototype) объекта?",
        answer:
          "Прототип объекта - это механизм наследования в JavaScript, который позволяет объектам наследовать свойства и методы от других объектов. Каждый объект в JavaScript имеет ссылку на свой прототип.",
      },
      {
        question: "Какие методы используются в регулярных выражениях?",
        answer:
          "В регулярных выражениях часто используются методы test(), exec(), match(), search(), replace() и split() для работы с текстом и шаблонами.TODO Че означает каждое",
      },
      {
        question: "Что такое полифил (polyfill)?",
        answer:
          "Полифил (polyfill) - это техника веб-разработки, которая предоставляет реализацию функциональности, которая отсутствует в старых версиях браузеров, обеспечивая совместимость со стандартами новых API. TODO ПРИМЕР",
      },
      {
        question: "Что такое switch/case? Правила использования switch/case?",
        answer:
          "switch/case - это конструкция в JavaScript, предназначенная для выбора различных вариантов выполнения кода в зависимости от значения выражения. Правила использования: каждый случай (case) должен заканчиваться оператором break, чтобы предотвратить выполнение следующих вариантов; при отсутствии оператора break выполнение продолжается к следующему варианту; можно использовать оператор default, который будет выполняться, если ни один из case не совпал.",
      },
      {
        question: "Типы функций по способности принимать другие функции?",
        answer:
          "Типы функций по способности принимать другие функции включают в себя обычные функции, функции обратного вызова (callback functions), функции высшего порядка (higher-order functions) и стрелочные функции (arrow functions). TODO Не понял",
      },
      {
        question:
          "Что такое выражение (expression) и инструкции (statement) в JavaScript?",
        answer:
          "Выражение (expression) - это фрагмент кода, который вычисляется в значение, в то время как инструкция (statement) - это фрагмент кода, который выполняет определенное действие. В JavaScript выражения могут быть частями инструкций.",
      },
      {
        question: "Разница между .some() и .every()?",
        answer:
          "Метод .some() возвращает true, если хотя бы один элемент массива удовлетворяет условию, в то время как метод .every() возвращает true, если все элементы массива удовлетворяют условию.",
      },
      {
        question: "Как сгенерировать случайное число в JavaScript?",
        answer:
          "В JavaScript случайное число можно сгенерировать с помощью метода Math.random(), который возвращает псевдослучайное число в диапазоне [0, 1). Для получения случайного числа в определенном диапазоне можно использовать формулу Math.floor(Math.random() * (max - min + 1)) + min.",
      },
      {
        question: "Типы операторов в JavaScript?",
        answer:
          "Типы операторов в JavaScript включают в себя арифметические, сравнения, логические, присваивания, условные, битовые, операторы унарного плюса и минуса, операторы typeof и instanceof, а также операторы удаления и вызова new.",
      },
      {
        question: "Разница между параметром и аргументом функции?",
        answer:
          "Параметр функции - это переменная, объявленная в определении функции. Аргумент функции - это значение, переданное функции при ее вызове, которое затем присваивается параметру.",
      },
      {
        question: "Правила задания имён для переменных и функций в JavaScript?",
        answer:
          "Имена переменных и функций в JavaScript должны начинаться с буквы, символа подчеркивания (_) или знака доллара ($). Они могут содержать буквы, цифры, символы подчеркивания и знаки доллара. Имена чувствительны к регистру (case-sensitive) и не должны быть зарезервированными ключевыми словами.",
      },
      {
        question:
          "Разница между явным и неявным преобразованием (Implicit and Explicit Coercion)?",
        answer:
          "Неявное преобразование (Implicit Coercion) происходит автоматически во время выполнения программы, когда JavaScript пытается выполнить операцию с разными типами данных. Явное преобразование (Explicit Coercion) происходит с помощью функций parseInt(), parseFloat(), String(), Number(), Boolean(), а также операторов +, - при необходимости приведения данных к определенному типу.",
      },
      {
        question: "Для чего применяется метод Array.from()?",
        answer:
          "Метод Array.from() используется для создания нового массива из массивоподобных или итерируемых объектов, таких как строк, коллекции DOM и т.д. TODO ПРММЕР",
      },
      {
        question: "Назовите способы преобразования массива в объект?",
        answer:
          "Массив можно преобразовать в объект, используя циклы (например, for...of или forEach), метод reduce() или Object.assign(). Например, можно использовать Object.assign({}, массив), чтобы создать объект из массива, используя значения массива в качестве значений свойств. TODO Как работает Object assign",
      },
      {
        question: "Разница между Object и Map?",
        answer:
          "Object является встроенным типом данных в JavaScript, используемым для хранения коллекций пар ключ-значение, а Map - это коллекция, в которой ключами могут быть произвольные значения, включая примитивы, объекты и даже функции. Кроме того, Map поддерживает итерацию по порядку, в котором происходило добавление элементов.",
      },
      {
        question: "Что такое каррирование?",
        answer:
          "Каррирование - это техника функционального программирования, при которой функция с несколькими аргументами преобразуется в последовательность функций, каждая из которых принимает только один аргумент. Это делает функции более гибкими и позволяет частично применять и переиспользовать их. TODO Пример, нихера не понял",
      },
      {
        question: "Для чего используются метод Object.seal()?",
        answer:
          "Метод Object.seal() используется для запрета добавления новых свойств к существующему объекту, а также для запрета удаления или изменения существующих свойств. Однако значения свойств все равно могут быть изменены, если они имеют тип объекта.",
      },
      {
        question: "Для чего используется свойство .dataset?",
        answer:
          "Свойство .dataset используется для доступа к атрибутам данных (data-*) HTML-элемента в JavaScript. Это позволяет хранить пользовательские данные непосредственно в разметке и обращаться к ним через JavaScript.",
      },
      {
        question: "Каким образом можно обмениваться кодом между файлами?",
        answer:
          "Для обмена кодом между файлами в JavaScript можно использовать модули. Стандарт ES6 предоставляет механизм экспорта и импорта модулей, позволяя импортировать код из одного файла в другой и экспортировать код для использования в других файлах.",
      },
      {
        question: "Как работает «сборщик мусора» в JavaScript?",
        answer:
          "Сборщик мусора в JavaScript отслеживает использование памяти и автоматически освобождает память, занимаемую объектами, которые больше не доступны для исполнения кода, то есть на которые нет ссылок из исполняемых частей программы.",
      },
      {
        question: "Что такое утечки памяти?",
        answer:
          "Утечка памяти – это ситуация в приложении, когда объекты сохраняются в памяти, несмотря на то, что они больше не используются. Постепенное накопление таких объектов может привести к исчерпанию доступной памяти и проблемам с производительностью.",
      },
      {
        question: "Назовите основные типы утечек памяти в JavaScript?",
        answer:
          "Основные типы утечек памяти в JavaScript включают утечки памяти из-за забытых ссылок, циклические ссылки, утечки памяти в замыканиях и утечки памяти при работе с событиями.",
      },
      {
        question:
          "Как работает контекст выполнения (execution context) в JavaScript?",
        answer:
          "Контекст выполнения в JavaScript представляет собой среду, в которой выполняется код. Он содержит информацию о переменных, области видимости, объекте 'this' и других аспектах, необходимых для выполнения кода.",
      },
      {
        question: "Разница между примитивом и объектом?",
        answer:
          "Примитивы в JavaScript (например, числа, строки, булевы значения, null и undefined) представляют собой неизменяемые значения, в то время как объекты – это коллекция ключ-значение и могут быть изменены.",
      },
      {
        question: "Что значит текст max call stack size exceeded в консоли?",
        answer:
          "Это сообщение означает, что был превышен максимальный размер стека вызовов (call stack) в JavaScript. Это обычно происходит, когда функция вызывает саму себя (рекурсия) без условия завершения.",
      },
      {
        question: "Как реализовать отложенную загрузку изображений?",
        answer:
          "Добавлять не сразу в HTML, а с помощью JS по мере необходимости. Отложенная загрузка изображений может быть реализована путем создания элементов динамически с помощью JavaScript при прокрутке страницы или при других условиях, чтобы загружать изображения только по мере необходимости и повышать производительность.",
      },
      {
        question: "Чем отличаются события input и change?",
        answer:
          "Событие input срабатывает при изменении значений ввода, в то время как событие change срабатывает когда элемент теряет фокус после изменения значения.",
      },
      {
        question: "Почему typeof null возвращает object?",
        answer:
          'Это исторически сложившаяся ошибка в реализации JavaScript в браузерах. При создании JavaScript в первой версии typeof null возвращал "object", и это поведение сохранено для совместимости с предыдущими версиями.',
      },
      {
        question: "Зачем нужен конструктор Proxy?",
        answer:
          "Конструктор Proxy в JavaScript используется для создания объекта-заглушки, который может перехватывать определённые операции с другим объектом и выполнять пользовательскую логику TODO NEED EXAMPLE.",
      },
      {
        question: "Что такое хвостовая рекурсия? Оптимизация рекурсии?",
        answer:
          "Хвостовая рекурсия - это форма рекурсии, при которой рекурсивный вызов функции является последней операцией в функции. Оптимизация рекурсии позволяет избежать переполнения стека путём замены рекурсивного вызова на цикл. TODO ЧЕГООО",
      },
      {
        question:
          "Что такое и как работает debounce() и throttle() в JavaScript?",
        answer:
          "Функция debounce() в JavaScript используется для задержки вызова функции, пока не пройдёт определённый интервал времени без новых вызовов. Функция throttle() используется для ограничения частоты вызова функции до определённого числа раз в определённый период времени. TODO РЕАЛИЗОВАТЬ ПРИМЕР",
      },
      {
        question:
          "Как в JavaScript работают декораторы? Как они могут быть использованы для модификации поведения классов и методов?",
        answer:
          "Декораторы в JavaScript - это функции, которые позволяют добавлять функциональность к существующим объектам и функциям. Они могут быть использованы для модификации поведения классов и методов, например, для добавления логирования, кэширования и других аспектов. TODO ПРИМЕРЫ",
      },
    ],
  },
  {
    header: "JS in Browser (вопросы из браузерного JavaScript)",
    questions: [
      {
        question: "Что такое DOM?",
        answer:
          "DOM (Document Object Model) - это представление веб-страницы в виде дерева объектов, которое браузер создает при загрузке HTML-документа.",
      },
      {
        question: "Типы узлов DOM-дерева?",
        answer:
          "Узлы DOM-дерева могут быть элементами (element nodes), атрибутами (attribute nodes), текстовыми узлами (text nodes), комментариями (comment nodes) и другими типами узлов.",
      },
      {
        question: "Методы поиска элементов в DOM?",
        answer:
          "Методы поиска элементов в DOM включают getElementById, getElementsByClassName, getElementsByTagName, querySelector и querySelectorAll.",
      },
      {
        question: "Свойства для перемещения по DOM-дереву?",
        answer:
          "Свойства parentNode, childNodes, firstChild, lastChild, nextSibling и previousSibling позволяют перемещаться по DOM-дереву.",
      },
      {
        question: "Разница между attribute и property у DOM-элементов?",
        answer:
          "Attribute представляет собой статическую характеристику элемента, указанную в HTML, в то время как property является динамическим свойством элемента, которое можно изменить программным путем.",
      },
      {
        question: "Что такое BOM?",
        answer:
          "BOM (Browser Object Model) - это часть браузера, предоставляющая объекты и методы для взаимодействия с браузером, а не с содержимым веб-страницы.",
      },
      {
        question: "Виды событий в JavaScript?",
        answer:
          "В JavaScript существуют различные виды событий, такие как события мыши (click, hover), события клавиатуры (keydown, keyup), события фокуса (focus, blur) и другие.",
      },
      {
        question: "Как добавить обработчик события на DOM-элемент?",
        answer:
          "Для добавления обработчика события на DOM-элемент можно использовать метод addEventListener, указав тип события и функцию-обработчик.",
      },
      {
        question: "Как удалить обработчик события с DOM-элемента?",
        answer:
          "Для удаления обработчика события с DOM-элемента можно использовать метод removeEventListener, указав тип события и функцию-обработчик.",
      },
      {
        question: "Что такое распространение события (Event Propagation)?",
        answer:
          "Распространение события в DOM происходит в двух направлениях: событие сначала погружается от корневого элемента к целевому элементу (фаза перехвата), затем всплывает обратно (фаза всплытия).",
      },
      {
        question: "Что такое делегирование событий (Event Delegation)?",
        answer:
          "Делегирование событий - это прием в JavaScript, при котором один обработчик события присваивается родительскому элементу для обработки событий от его потомков. Это позволяет эффективно обрабатывать события у большого количества элементов.",
      },
      {
        question: "Как использовать media выражения в JavaScript?",
        answer:
          "Media выражения могут быть использованы в JavaScript с помощью метода matchMedia, который позволяет проверять текущие условия запросов медиа и реагировать на изменения.",
      },
      {
        question: "Расскажите про координаты в браузере?",
        answer:
          "Координаты в браузере могут быть определены относительно окна браузера (clientX, clientY), относительно документа (pageX, pageY) или относительно элемента (offsetX, offsetY).",
      },
      {
        question: "Разница между HTMLCollection и NodeList?",
        answer:
          "HTMLCollection и NodeList оба представляют коллекции узлов в DOM, но различаются в некоторых методах и свойствах. HTMLCollection - это живая коллекция, обновляющаяся автоматически, в то время как NodeList - статическая коллекция.",
      },
      {
        question: "Как динамически добавить элемент на HTML-страницу?",
        answer:
          "Чтобы динамически добавить элемент на HTML-страницу, можно создать новый элемент с помощью метода createElement, настроить его свойства и содержимое, а затем добавить его в DOM с помощью метода appendChild или других методов вставки.",
      },
      {
        question:
          "Разница между feature detection, feature inference и анализом строки user-agent?",
        answer:
          "Feature detection - это проверка поддержки определенных функций браузером, feature inference - предположение о поддержке функции на основе других функций, а анализ строки user-agent - это анализ строки, содержащей информацию о браузере, чтобы определить его возможности.",
      },
      {
        question: "Разница между e.preventDefault() и e.stopPropagation()?",
        answer:
          "Метод e.preventDefault() используется для отмены действия по умолчанию браузера, связанного с событием, в то время как метод e.stopPropagation() предотвращает дальнейшее распространение события на другие элементы в DOM.",
      },
      {
        question: "Разница между event.target и event.currentTarget?",
        answer:
          "Свойство event.target содержит ссылку на элемент, на котором произошло событие, в то время как event.currentTarget указывает на элемент, на котором вызывается обработчик события (текущий целевой элемент).",
      },
      {
        question:
          "Разница между .stopPropagation() и .stopImmediatePropagation()?",
        answer:
          "Метод .stopPropagation() предотвращает дальнейшее всплытие события, в то время как метод .stopImmediatePropagation() предотвращает как всплытие, так и выполнение других обработчиков, прикрепленных к тому же элементу.",
      },
      {
        question: "Разница между событиями load и DOMContentLoaded?",
        answer:
          "Событие load срабатывает, когда вся страница и все ресурсы загружены, включая стили, изображения и скрипты, в то время как событие DOMContentLoaded происходит, когда дерево DOM было построено без учета стилей и изображений.",
      },
      {
        question: "Сколько аргументов принимает addEventListener?",
        answer:
          'Метод addEventListener принимает три аргумента: тип события (например, "click"), функцию-обработчик и опциональный флаг useCapture, указывающий на использование фазы перехвата (true) или всплытия (false).',
      },
      {
        question: "Разница между innerHTML и outerHTML?",
        answer:
          "Свойство innerHTML возвращает или устанавливает содержимое элемента, включая его потомков, в то время как outerHTML возвращает HTML элемента вместе с самим элементом.",
      },
      {
        question: "Разница между JSON и XML?",
        answer:
          "JSON (JavaScript Object Notation) - это легкий формат обмена данными, представляющий данные в виде пар ключ-значение, в то время как XML (eXtensible Markup Language) - это язык разметки, который представляет данные в иерархической структуре, используя теги.",
      },
      {
        question: "Как узнать об использовании метода event.preventDefault()?",
        answer:
          "Чтобы узнать, был ли использован метод event.preventDefault() для предотвращения действия по умолчанию в обработчике события, можно проверить свойство defaultPrevented объекта события. Если оно равно true, метод preventDefault был вызван.",
      },
      {
        question: "Для чего используется свойство window.navigator?",
        answer:
          "Свойство window.navigator предоставляет информацию о браузере пользователя, такую как имя браузера, версия, поддерживаемые языки, устройство и другие характеристики.",
      },
      {
        question: "Для чего используется метод .focus()?",
        answer:
          "Метод .focus() используется для установки фокуса на элементе, позволяя пользователю взаимодействовать с этим элементом, например, вводить текст в поле ввода.",
      },
      {
        question: "Для чего используется свойство .forms?",
        answer:
          "Свойство .forms используется для доступа к коллекции форм, содержащихся внутри элемента (например, внутри элемента).",
      },
      {
        question: "Для чего используется метод .scrollIntoView()?",
        answer:
          "Метод .scrollIntoView() используется для прокрутки содержимого элемента так, чтобы он стал видимым в области просмотра окна браузера.",
      },
      {
        question: "Разница между методами .submit() и .requestSubmit()?",
        answer:
          "Метод .submit() вызывает отправку формы в стандартном режиме, а метод .requestSubmit() отправляет форму с учетом атрибута formnovalidate, игнорируя его, если он установлен.",
      },
      {
        question: "Расскажите о IntersectionObserver?",
        answer:
          "IntersectionObserver - это API веб-браузера, позволяющее отслеживать видимость элементов на странице относительно контейнера просмотра или другого элемента, что упрощает реакцию на прокрутку и изменения размеров окна.",
      },
      {
        question: "Расскажите о URLSearchParams?",
        answer:
          "URLSearchParams - это встроенный объект в JavaScript, предоставляющий удобный способ работы с параметрами URL, позволяя извлекать, добавлять, изменять и удалять параметры с легкостью.",
      },
      {
        question: "Какие есть ограничения у window.close()?",
        answer:
          "Метод window.close() может закрывать только окна, которые были открыты с помощью JavaScript, и даже тогда он может вызвать предупреждение или быть заблокирован браузером из-за политик безопасности.",
      },
      {
        question:
          "Как можно создавать пользовательское событие (custom events) в JavaScript?",
        answer:
          "Для создания пользовательского события в JavaScript нужно использовать конструктор CustomEvent, указав тип события и дополнительные параметры по желанию, затем можно инициировать это событие на целевом элементе.",
      },
      {
        question: "Что такое IndexedDB? Как работает IndexedDB?",
        answer:
          "IndexedDB - это встроенная база данных на стороне клиента в браузере, предназначенная для хранения больших объемов структурированных данных. Она работает асинхронно, позволяя выполнять операции чтения и записи без блокирования основного потока исполнения JavaScript.",
      },
      {
        question: "Расскажите о методе requestAnimationFrame()?",
        answer:
          "Метод requestAnimationFrame() используется для планирования анимаций и других задач, обновляемых на экране, синхронизировано с процессом перерисовки браузера. Он обеспечивает плавное, оптимизированное выполнение анимаций без ущерба для производительности.",
      },
    ],
  },
  {
    header: "Async JS (вопросы из асинхронного JavaScript)",
    questions: [
      {
        question: "Разница между синхронными и асинхронными функциями?",
        answer:
          "Синхронные функции выполняются последовательно и блокируют выполнение других операций до их завершения, в то время как асинхронные функции позволяют другим операциям продолжать работу независимо от них и выполняются не сразу, а после завершения основного потока.",
      },
      {
        question: "Что такое AJAX?",
        answer:
          "AJAX (Asynchronous JavaScript and XML) - это подход к созданию интерактивных веб-страниц, позволяющий обмениваться данными между браузером и сервером без перезагрузки страницы.",
      },
      {
        question: "Что такое same-origin policy в контексте JavaScript?",
        answer:
          "Same-origin policy - это политика безопасности, применяемая браузерами, которая ограничивает взаимодействие JavaScript с ресурсами из другого источника (другой домен, протокол или порт) для предотвращения XSS-атак и других уязвимостей.",
      },
      {
        question: "Что такое цикл событий (event loop) и как он работает?",
        answer:
          "Цикл событий (event loop) - это механизм в JavaScript, который обрабатывает асинхронные события и задачи. Он работает по принципу обработки задач поочередно, не блокируя основной поток выполнения и управляя порядком выполнения асинхронных операций.",
      },
      {
        question: "Разница между микро и макрозадачами в event loop?",
        answer:
          "Микрозадачи обрабатываются перед макрозадачами и обычно связаны с обработкой промисов, в то время как макрозадачи включают операции ввода-вывода, события и выполнение скриптов, и обработка их происходит после микрозадач.",
      },
      {
        question: "Расскажите о queueMicrotask?",
        answer:
          "queueMicrotask - это механизм в JavaScript, который позволяет планировать выполнение задач в микроочереди после завершения текущего стека вызовов, обеспечивая выполнение дополнительных операций вне основного потока выполнения.",
      },
      {
        question: "Что такое промисы (Promises)?",
        answer:
          "Промисы (Promises) - это объекты в JavaScript, представляющие результат асинхронной операции. Они используются для обработки асинхронных задач и упрощения работы с асинхронным кодом, предоставляя интерфейс для обработки успеха или ошибки операции.",
      },
      {
        question: "Плюсы и минусы использовании Ajax?",
        answer:
          "Плюсы: улучшение пользовательского опыта, возможность обмена данными без перезагрузки страницы, эффективное использование ресурсов. Минусы: ограничение политики same-origin, необходимость управления состоянием и ошибками, возможные проблемы с безопасностью и SEO.",
      },
      {
        question: "Подходы при работе с асинхронным кодом?",
        answer:
          'Подходы к работе с асинхронным кодом в JavaScript включают использование колбэков, промисов, async/await и генераторов. Каждый из этих подходов предоставляет свои методы для управления асинхронными операциями и предотвращения "callback hell".',
      },
      {
        question: "Преимущества использования промисов вместо колбэков?",
        answer:
          'Промисы обеспечивают более простую структуру кода, избавляют от "callback hell", делают возможным последовательную и параллельную обработку асинхронных операций, и позволяют более эффективно обрабатывать ошибки.',
      },
      {
        question: "Что такое callback-функция? Что такое Callback Hell?",
        answer:
          "Callback-функция - это функция, переданная в качестве аргумента в другую функцию, которая будет вызвана по завершении определенной операции. Callback Hell - это ситуация, когда вложенность колбэков становится трудной для управления из-за множества вложенных асинхронных операций.",
      },
      {
        question: "Проблемы при использовании callback-функций?",
        answer:
          'Проблемы использования callback-функций включают увеличение вложенности и сложность кода, усложнение отладки и поддержки кода, а также возможность возникновения "callback hell", что делает код менее читаемым и поддерживаемым.',
      },
      {
        question: "Что такое async/await?",
        answer:
          "async/await - это синтаксический сахар в JavaScript, позволяющий писать асинхронный код так, как если бы он был синхронным. Ключевые слова async и await используются для создания асинхронных функций и управления операциями, возвращающими промисы.",
      },
      {
        question:
          "Разница между Promise.all(), Promise.any() и Promise.race()?",
        answer:
          "Promise.all() ждет, пока все переданные промисы завершатся, и возвращает результат в виде массива. Promise.any() возвращает результат первого успешно завершившегося промиса. Promise.race() возвращает результат первого промиса, который завершится (успешно или с ошибкой).",
      },
      {
        question: "Расскажите про статический метод .allSettled()?",
        answer:
          "Метод .allSettled() является статическим методом промиса и ожидает завершения всех промисов, возвращая массив с результатами всех промисов, независимо от их успешного завершения или возникновения ошибки.",
      },
      {
        question: "Плюсы и минусы асинхронного программирования в JavaScript?",
        answer:
          "Плюсы: улучшение отзывчивости интерфейса, использование ресурсов более эффективным образом, возможность выполнения параллельных задач. Минусы: сложность отладки и управления состоянием, возможность возникновения ошибок из-за гонок данных.",
      },
      {
        question:
          "Как выполнить несколько асинхронных операций последовательно?",
        answer:
          "Для выполнения нескольких асинхронных операций последовательно в JavaScript можно воспользоваться методом chaining (цепочечным вызовом) промисов или использовать ключевое слово async/await для выполнения операций внутри асинхронной функции последовательно.",
      },
      {
        question:
          "Какие проблемы может вызвать неправильное использование асинхронности в JavaScript?",
        answer:
          "Неправильное использование асинхронности в JavaScript может привести к проблемам, таким как гонки данных (race conditions), непредсказуемое поведение из-за порядка выполнения операций, утечки памяти из-за незавершенных операций и сложности отладки кода.",
      },
      {
        question: "Что такое fetch()? Как работает функция fetch()?",
        answer:
          "Метод fetch() - это интерфейс для отправки сетевых запросов (обычно HTTP) из JavaScript. Fetch() возвращает промис, который позволяет обрабатывать полученные ответы и ошибки. При использовании fetch() можно получить данные с сервера и обновить содержимое веб-страницы без перезагрузок.",
      },
      {
        question: "Что такое JSON в JavaScript? Как его можно использовать?",
        answer:
          "JSON (JavaScript Object Notation) - это формат обмена данными, используемый для передачи структурированных данных между сервером и клиентом. В JavaScript объекты JSON представлены в виде строк, которые могут быть преобразованы в объекты JavaScript с помощью методов JSON.parse() и наоборот в JSON с помощью JSON.stringify().",
      },
      {
        question:
          "Что такое и как работает коэффициент сжатия (compression ratio) в контексте веб-разработки?",
        answer:
          "Коэффициент сжатия (compression ratio) в веб-разработке обозначает степень сжатия данных (например, текстового контента, изображений) при передаче их по сети. Чем выше коэффициент сжатия, тем меньше объем данных нужно передавать, что ведет к улучшению производительности загрузки веб-страницы. Веб-серверы и браузеры поддерживают различные методы сжатия, такие как Gzip, Brotli и другие, для уменьшения размера передаваемых данных и ускорения загрузки веб-страниц.",
      },
    ],
  },
  {
    header: "ECMAScript (вопросы из стандарта ECMAScript)",
    questions: [
      {
        question: "Что такое ECMAScript? В чём отличие от JavaScript?",
        answer:
          "ECMAScript - это стандарт, описывающий основы скриптового языка программирования, такого как JavaScript. JavaScript является реализацией ECMAScript, то есть язык JavaScript основан на стандарте ECMAScript.",
      },
      {
        question: "Разница между let, const и var?",
        answer:
          "let и const являются блочно-областными областями видимости и имеют временную мертвую зону (temporal dead zone), в отличие от var. Переменные, объявленные через let, могут быть переприсвоены, но их нельзя повторно объявить в той же области видимости, в то время как const создает неизменяемую переменную, значение которой нельзя изменить после присваивания.",
      },
      {
        question: "Можно ли изменить значение определённое через const?",
        answer:
          "Нельзя изменить саму ссылку, созданную через const, но если это объект или массив, то их внутренние свойства и элементы можно изменить. Однако присвоение нового значения самой константе невозможно.",
      },
      {
        question: "Что такое временная мёртвая зона (temporal dead zone)?",
        answer:
          "Временная мертвая зона (TDZ) - это фаза при выполнении программы, где переменная существует, но не может быть доступна, так как ее объявление было поднято (hoisting), но инициализация не произошла. Попытка обратиться к переменной в TDZ вызовет ошибку ReferenceError.",
      },
      {
        question: "Разница между Rest и Spread операторами?",
        answer:
          "Оператор распаковки (Spread) используется для разбиения объектов или массивов на отдельные элементы, а оператор сбора (Rest) используется для сбора нескольких элементов в массив или нескольких аргументов в функцию.",
      },
      {
        question: "Что такое деструктуризация?",
        answer:
          "Деструктуризация - это способ извлечения значений из объектов или массивов и присвоения их другим переменным более удобным способом. В JavaScript это позволяет извлекать данные из сложных структур данных и использовать их отдельно.",
      },
      {
        question: "Для чего используется цикл for…of?",
        answer:
          "Цикл for...of используется для перебора элементов итерируемых объектов, таких как массивы, строки, наборы и другие. При каждой итерации цикла переменная получает значение текущего элемента структуры данных.",
      },
      {
        question: "Что такое шаблонные литералы (Template Literals)?",
        answer:
          "Шаблонные литералы - это строки в JavaScript, которые позволяют встраивать выражения внутрь строки. Они используют обратные кавычки (``) для обозначения строки и позволяют использовать интерполяцию для вставки значений переменных, выражений и многострочных строк.",
      },
      {
        question: "Что такое Set, Map, WeakMap и WeakSet?",
        answer:
          "Set - это коллекция уникальных значений, Map - это коллекция ключ-значение, WeakMap - это коллекция, где ключами могут быть только объекты, и эти ключи не удерживают объекты от сборки мусора, WeakSet - это коллекция, где могут храниться только объекты и они не удерживаются от сборки мусора.",
      },
      {
        question: "Разница между обычными функциями и стрелочными?",
        answer:
          "Основные различия: контекст выполнения (this), отсутствие своего this, невозможность использования new для создания экземпляров, отсутствие привязки аргументов (arguments), нельзя вызывать через call(), apply() или bind().",
      },
      {
        question: "Разница между методом Object.freeze() и const?",
        answer:
          "Object.freeze() используется для замораживания объекта, что препятствует добавлению, удалению или изменению существующих свойств, в то время как const используется для создания неизменяемой ссылки на значение.",
      },
      {
        question: "Что такое итераторы?",
        answer:
          "Итератор - это объект, предоставляющий метод next(), который возвращает результат следующей итерации. Он предоставляет унифицированный интерфейс для перебора различных типов данных.",
      },
      {
        question: "Что такое генераторы? Когда стоит использовать генераторы?",
        answer:
          "Генератор - это функция, которая может быть остановлена во время выполнения, а затем возобновлена снова. Генераторы стоит использовать для ленивой загрузки данных, управления асинхронными операциями и создания бесконечных последовательностей.",
      },
      {
        question: "Что такое ES6 модули?",
        answer:
          "ES6 модули - это механизм организации кода, позволяющий разбить код на небольшие, самодостаточные модули, которые могут быть импортированы и экспортированы из других модулей. Они предоставляют четкий и удобный способ организации кода.",
      },
      {
        question: "Что такое символ (Symbol) в ES6?",
        answer:
          "Символ (Symbol) - это новый примитивный тип данных в ES6, представляющий уникальный и неизменяемый идентификатор. Символы часто используются для создания скрытых свойств объектов.",
      },
      {
        question: "Для чего используется метод .includes()?",
        answer:
          "Метод .includes() используется для определения наличия элемента в массиве или подстроки в строке, возвращая true или false в зависимости от результата.",
      },
      {
        question: "Для чего используется метод .getOwnPropertyDescriptors()?",
        answer:
          "Метод .getOwnPropertyDescriptors() используется для получения всех собственных дескрипторов свойств объекта, включая конфигурацию (enumerable, configurable, writable) и значения свойств.",
      },
      {
        question: "Расскажите о методах .keys(), .values(), .entries()?",
        answer:
          "Метод .keys() возвращает итератор содержащий ключи для каждого индекса в массиве или для каждого ключа в объекте; .values() возвращает итератор содержащий значения каждого индекса в массиве или каждого значения в объекте; .entries() возвращает итератор содержащий пары ключ-значение для каждого индекса в массиве или пары ключ-значение для каждого свойства в объекте.",
      },
      {
        question: "Для чего используется метод .fromEntries()?",
        answer:
          "Метод .fromEntries() используется для преобразования массива с парами ключ-значение в объект.",
      },
      {
        question: "Для чего используются методы .flat() и .flatMap()?",
        answer:
          "Метод .flat() используется для выравнивания вложенных подмассивов в массиве, т.е. делает массив одномерным. .flatMap() используется для сопоставления каждого элемента массива с функцией и уплощения результатов в новый массив.",
      },
      {
        question: "Для чего используются методы .padStart() и .padEnd()?",
        answer:
          "Метод .padStart() используется для добавления указанной строки в начало текущей строки до достижения указанной длины, .padEnd() - для добавления указанной строки в конец текущей строки до достижения указанной длины.",
      },
      {
        question: "Для чего используются методы .startsWith() и .endsWith()?",
        answer:
          "Метод .startsWith() используется для проверки, начинается ли строка с определенной подстроки. Метод .endsWith() используется для проверки, заканчивается ли строка определенной подстрокой.",
      },
      {
        question:
          "Как в JavaScript удалять пробельные символы в начале и в конце строки?",
        answer:
          "В JavaScript, для удаления пробельных символов в начале и в конце строки, вы можете использовать методы .trim(), .trimStart() (ранее .trimLeft()) и .trimEnd() (ранее .trimRight()).",
      },
      {
        question: "Расскажите об операторе Optional Chaining (?.)?",
        answer:
          "Оператор Optional Chaining (?.) в JavaScript используется для облегчения доступа к свойствам объекта, если свойство или цепочка свойств может быть undefined или null. Он позволяет избежать ошибок при обращении к несуществующим свойствам, предотвращая возникновение исключения TypeError.",
      },
      {
        question: "Для чего используется метод .replaceAll()?",
        answer:
          "Метод .replaceAll() используется для замены всех вхождений подстроки в строке на другую подстроку.",
      },
      {
        question: "Что такое оператор логического присваивания?",
        answer:
          "Оператор логического присваивания (||=, &&=) в JavaScript используется для присвоения значения переменной при условии, что она не определена (null или undefined для ||=) или определена (для &&=).",
      },
      {
        question: "Как увеличить читаемость больших чисел?",
        answer:
          "Для увеличения читаемости больших чисел можно использовать нижнее подчеркивание для разделения разрядов, например: const billion = 1_000_000_000;",
      },
      {
        question: "Что такое приватные аксессоры?",
        answer:
          "Приватные аксессоры - это механизм в JavaScript, который позволяет объявлять приватные свойства и методы внутри классов с использованием синтаксиса #имя. Они не доступны извне класса.",
      },
      {
        question: "Разница между ES6-классами и конструкторами функций?",
        answer:
          "ES6-классы представляют собой синтаксический сахар над конструкторами функций и прототипами, предоставляя более удобный способ определения объектов и наследования.",
      },
      {
        question: "Что такое оператор нулевого слияния (??)?",
        answer:
          "Оператор нулевого слияния (??) используется для возврата первого определенного операнда, если он null или undefined, иначе возвращается второй операнд.",
      },
      {
        question:
          "В чём отличие оператора нулевого слияния (??) и оператора “ИЛИ” (||)?",
        answer:
          "Оператор || возвращает первый операнд, если он приводится к true (true, строка, число, объект и т.д.), иначе возвращается второй операнд. Оператор ?? возвращает первый операнд, если он null или undefined, иначе возвращается второй операнд.",
      },
      {
        question:
          "Назовите основные методы и свойства работы с коллекцией Map?",
        answer:
          "Основные методы работы с коллекцией Map включают set(key, value) для установки значения по ключу, get(key) для получения значения по ключу, delete(key) для удаления элемента по ключу, clear() для удаления всех элементов, size для получения количества элементов, а также методы keys(), values() и entries() для получения итераторов ключей, значений и пар ключ-значение соответственно.",
      },
      {
        question:
          "Назовите основные методы и свойства работы с коллекцией Set?",
        answer:
          "Основные методы и свойства работы с коллекцией Set: - add(value): добавляет новый элемент со значением value в Set. - delete(value): удаляет элемент со значением value из Set, если он присутствует. - has(value): возвращает true, если элемент со значением value присутствует в Set, иначе false. - clear(): удаляет все элементы из Set. - size: свойство, возвращающее количество элементов в Set.",
      },
      {
        question: "Как осуществить перебор элементов в коллекциях Map и Set?",
        answer:
          "Перебор элементов в коллекциях Map и Set можно осуществить с помощью методов forEach(), for...of и перебора по ключам и значениям при помощи entries(), keys() и values().",
      },
      {
        question: "Как работают дефолтные параметры в ES6?",
        answer:
          "Дефолтные параметры в ES6 позволяют задавать значения по умолчанию для параметров функции. Если при вызове функции аргумент не передан, будет использовано значение по умолчанию.",
      },
      {
        question: "Что такое BigInt в ES2020 и для чего он используется?",
        answer:
          "BigInt в ES2020 представляет собой новый тип данных, который позволяет работать с целыми числами произвольной длины. Он используется там, где требуется работа с очень большими целыми числами, которые не могут быть представлены стандартным типом Number.",
      },
      {
        question:
          "Какие нововведения были представлены в ECMAScript 2021 (ES12)?",
        answer:
          "Нововведения в ECMAScript 2021 (ES12) включают: - Logical Assignment Operators (логические операторы присвоения) позволяют сочетать бинарные операторы и операторы присваивания - String.prototype.replaceAll() предоставляет метод для замены всех вхождений подстроки в строке на другую подстроку. - Promise.any() возвращает промис, который разрешается при выполнении первого промиса из переданных ему промисов. - WeakRef и FinalizationRegistry предоставляют инструменты для более точного контроля над сборкой мусора.",
      },
    ],
  },
  {
    header: "Accessibility (вопросы по доступности)",
    questions: [
      {
        question: "Что такое WCAG?",
        answer:
          "WCAG (Web Content Accessibility Guidelines) - это набор рекомендаций по созданию доступных веб-ресурсов, разработанный W3C.",
      },
      {
        question: "Основные принципы доступности?",
        answer:
          "Основные принципы доступности включают в себя воспринимаемость (Perceivable), управляемость (Operable), понимаемость (Understandable) и надежность (Robust).",
      },
      {
        question: "Что такое скринридер?",
        answer:
          "Скринридер - это программное обеспечение, которое читает содержимое экрана для людей с ограниченными возможностями зрения и помогает им взаимодействовать с компьютером.",
      },
      {
        question: "Уровни доступности?",
        answer:
          "Уровни доступности в WCAG: A (минимальный), AA (средний), AAA (максимальный).",
      },
      {
        question: "Как скрыть содержимое тэга от скринридеров?",
        answer:
          "Для скрытия содержимого тега от скринридеров можно использовать CSS свойство `display: none` или `visibility: hidden`, но при этом желательно использовать такие методы, которые не прячут для всех пользователей, а только для скринридеров.",
      },
      {
        question: "Как удалить семантику у элемента?",
        answer:
          "Для удаления семантики у элемента можно использовать атрибут `role='presentation'` для указания, что элемент должен рассматриваться как презентационный и не имеет семантического значения.",
      },
      {
        question: "Что такое ARIA роли в веб приложении?",
        answer:
          "ARIA роли - это набор атрибутов, определяющих роль элемента в веб-приложении для улучшения доступности для пользователей с ограничениями. Используются для добавления нужной семантики к элементам, которые не являются семантическими по умолчанию.",
      },
      {
        question: "Для чего используется атрибут aria-roledescription?",
        answer:
          "Атрибут `aria-roledescription` используется для предоставления пользовательскому агенту дополнительной информации о роли элемента, что может быть полезно для пользователей скринридеров.",
      },
      {
        question:
          "Какие HTML атрибуты можно использовать для улучшения доступности?",
        answer:
          "Для улучшения доступности HTML можно использовать атрибуты: alt для изображений, title для подсказок, tabindex для управления порядком фокусировки, aria-* для описания ролей и состояний элементов и т.д.",
      },
      {
        question: "Назовите средства и методы тестирования доступности?",
        answer:
          "Средства и методы тестирования доступности включают в себя ручное тестирование с использованием скринридеров (например, NVDA, VoiceOver), автоматизированные инструменты (например, Lighthouse, Axe), аудиты специалистов по доступности.",
      },
      {
        question:
          "Какие стандарты доступности следует учитывать при разработке?",
        answer:
          "При разработке следует учитывать стандарты доступности, такие как WCAG (Web Content Accessibility Guidelines) и региональные стандарты, утвержденные организациями и властями в области доступности.",
      },
      {
        question: "Разница между usability и accessibility?",
        answer:
          "Usability относится к удобству использования, уровню комфорта и эффективности при работе с веб-сайтом. Accessibility - это обеспечение равного доступа к информации и возможностей использования ресурса для пользователей с ограничениями.",
      },
      {
        question: "Что нужно учитывать при разработке доступного сайта?",
        answer:
          "При разработке доступного сайта необходимо учитывать структуру страницы, использование семантических тегов, доступность форм, управление фокусом, контрастность цветов, использование аудио и видео субтитров и многое другое.",
      },
      {
        question:
          "Как структура заголовков (H1-H6) влияет на доступность? Как правильно их использовать для улучшения навигации и доступности контента?",
        answer:
          "Правильная структура заголовков с помощью тегов H1-H6 помогает организовать контент и улучшить навигацию для пользователей и поисковых систем. H1 - основной заголовок, H2-H6 - подзаголовки разных уровней вложенности.",
      },
      {
        question:
          "Какие правила следует соблюдать при работе с цветом для обеспечения лучшей доступности?",
        answer:
          "При работе с цветом для обеспечения лучшей доступности следует обеспечивать достаточный контраст между текстом и фоном, избегать использования только цвета для передачи информации, предоставлять альтернативные способы передачи информации (например, шаблоны).",
      },
      {
        question:
          "Какие рекомендации существуют для работы с мультимедиа-контентом для обеспечения лучшей доступности?",
        answer:
          "Для работы с мультимедийным контентом для обеспечения лучшей доступности рекомендуется предоставлять текстовые описания для изображений (атрибут alt), использовать альтернативные медиа-форматы для аудио и видео, предусматривать аудио и видео субтитры и описания для пользователей с нарушениями слуха или зрения, обеспечивать управление воспроизведением и настройку контрастности цветов для контента.",
      },
    ],
  },
  {
    header: "TypeScript (вопросы по языку TypeScript)",
    questions: [
      {
        question: "Что такое TypeScript?",
        answer:
          "TypeScript - это язык программирования, который является надмножеством JavaScript, добавляющим статическую типизацию и другие возможности к языку JavaScript.",
      },
      {
        question: "Основные компоненты TypeScript?",
        answer:
          "Основными компонентами TypeScript являются компилятор TypeScript (tsc), язык синтаксиса TypeScript, статическая типизация, интерфейсы, классы, модули, аннотации типов и другие.",
      },
      {
        question: "Назовите особенности TypeScript?",
        answer:
          "Особенности TypeScript включают статическую типизацию, использование ES6+ возможностей, улучшенную поддержку классов и интерфейсов, декораторы, возможность компиляции в JavaScript, лучшую поддержку объектно-ориентированной разработки и др.",
      },
      {
        question: "Плюсы использования TypeScript?",
        answer:
          "Плюсы использования TypeScript включают более безопасный код благодаря статической типизации, повышение производительности разработчиков, улучшение читаемости и понимания кода, поддержку современных возможностей языка JavaScript.",
      },
      {
        question: "Минусы использования TypeScript?",
        answer:
          "Минусы использования TypeScript могут включать дополнительную сложность из-за статической типизации, необходимость изучения новых концепций и нюансов языка, возможную необходимость дополнительных шагов компиляции.",
      },
      {
        question: "Типы в TypeScript?",
        answer:
          "В TypeScript есть основные встроенные типы данных, такие как number, string, boolean, object, Array, tuple, enum, any, void, null, undefined, never, unknown, literal types и другие, а также возможность создания пользовательских типов.",
      },
      {
        question: "Что такое декораторы?",
        answer:
          "Декораторы в TypeScript - это специальные функции, которые позволяют добавлять метаданные и функциональность к классам, методам, свойствам и параметрам во время объявления.",
      },
      {
        question: "Поддерживает ли TypeScript перегрузку функций?",
        answer:
          "Да, TypeScript поддерживает перегрузку функций, что позволяет объявлять несколько вариантов функции с разными параметрами и типами возвращаемого значения.",
      },
      {
        question: "Разница между типом (type) и интерфейсом (interface)?",
        answer:
          "Основное различие между типом и интерфейсом в TypeScript заключается в том, что интерфейс создает именованную структуру, которая может быть расширена или реализована, тогда как тип позволяет определять тип.",
      },
      {
        question:
          "Что такое JSX в TypeScript? Какие режимы JSX поддерживает TypeScript?",
        answer:
          'JSX (JavaScript XML) - это расширение синтаксиса JavaScript, позволяющее писать выражения, похожие на XML или HTML внутри кода JavaScript. TypeScript поддерживает два режима JSX: "preserve" и "react".',
      },
      {
        question:
          "Что такое директивы с тремя наклонными чертами (Triple-Slash Directives), их типы?",
        answer:
          'Директивы с тремя наклонными чертами - это специальные комментарии в TypeScript, которые используются для управления компиляцией. Некоторые из типов директив - /// <reference path="..." />, /// <reference types="..." />, /// <amd-dependency path="..." />, /// <amd-module name="..." /> и другие.',
      },
      {
        question:
          "Что такое внешние объявления переменных (ambient declaration) в TypeScript?",
        answer:
          "Внешние объявления переменных (ambient declaration) - это способ объявления типов и интерфейсов для библиотек и модулей, которые находятся вне текущего проекта. Это позволяет TypeScript понимать типы и интерфейсы, которые находятся в JavaScript-коде, который не имеет объявлений типов.",
      },
      {
        question:
          "Разница между абстрактным классом (abstract class) и интерфейсом (interface)?",
        answer:
          "Абстрактный класс может содержать реализацию методов, в то время как интерфейс только определяет контракт (сигнатуру) методов или свойств.",
      },
      {
        question: "Какие элементы ООП поддерживаются в TypeScript?",
        answer:
          "TypeScript поддерживает классы, интерфейсы, наследование, инкапсуляцию, полиморфизм, модификаторы доступа (public, private, protected), статические члены и другие элементы объектно-ориентированного программирования.",
      },
      {
        question: "Модификаторы доступа в TypeScript?",
        answer:
          "TypeScript поддерживает три вида модификаторов доступа: public, private и protected. Public обозначает, что свойство или метод доступно из любого места, private - только изнутри самого класса, protected - из класса и его наследников.",
      },
      {
        question:
          "Разница между внутренним (Internal Module) и внешними модулями (External Module)?",
        answer:
          "Internal Module (также известный как пространство имен) - это способ организации кода внутри одного файла. External Module (также известный как модуль) - это отдельный файл, который экспортирует свои элементы для использования в других файлах.",
      },
      {
        question: "Что такое декораторы в TypeScript?",
        answer:
          "Декораторы - это специальные функции, которые могут использоваться для расширения классов и их членов в TypeScript. Они предоставляют способ добавления метаданных к классам и их членам, а также позволяют изменять их поведение.",
      },
      {
        question:
          "Как TypeScript поддерживает необязательные и дефолтные параметры в функции?",
        answer:
          "TypeScript позволяет определять параметры функции как необязательные, путем добавления знака вопроса (?) после имени параметра. Для установки значений по умолчанию для параметров используется присваивание в объявлении параметров.",
      },
      {
        question: "Что такое перечисление (enum)?",
        answer:
          "Перечисление (enum) в TypeScript - это набор именованных числовых констант. Они позволяют создавать легко читаемый и понятный код, используя понятные имена для значений.",
      },
      {
        question: "Для чего в TypeScript используется NoImplicitAny?",
        answer:
          "Опция компилятора NoImplicitAny в TypeScript используется для предотвращения неявного присвоения типа any переменным, если тип не указан явно. Это помогает обнаруживать потенциальные проблемы связанные с типами.",
      },
      {
        question: "Разница между типами “Объединение” (|) и “Пересечение” (&)?",
        answer:
          "Оператор объединения (|) используется для создания типа, который может быть одним из указанных типов, а оператор пересечения (&) используется для создания типа, который должен соответствовать всем указанным типам одновременно.",
      },
      {
        question: "Что такое общие типы (generic) в TypeScript?",
        answer:
          "Общие типы (generic) в TypeScript позволяют создавать компоненты, функции и классы, которые работают с разными типами, поддерживая одновременно тип безопасность и повторное использование кода.",
      },
      {
        question: "Какие области видимости доступны в TypeScript?",
        answer:
          "В TypeScript доступны три основные области видимости: public (общедоступная), private (частная) и protected (защищенная).",
      },
      {
        question: "Что такое .map файл, как и зачем его использовать?",
        answer:
          ".map файл - это файл, создаваемый при компиляции TypeScript в JavaScript с использованием опции source maps. Он содержит информацию, позволяющую отладчику исходного кода отображать исходный TypeScript код вместо скомпилированного JavaScript кода при отладке, упрощая процесс отладки в исходном коде.",
      },
      {
        question: "Можно ли использовать TypeScript в серверной разработке?",
        answer:
          "Да, TypeScript можно использовать в серверной разработке, особенно в контексте разработки с использованием Node.js.",
      },
      {
        question: "Для чего в TypeScript используют ключевое слово declare?",
        answer:
          "Ключевое слово declare в TypeScript используется для объявления переменных, функций, классов или интерфейсов без их фактической реализации. Оно используется для описания сущностей, которые уже существуют в другом месте, например, в JavaScript коде.",
      },
      {
        question: "Разница между типами void, never и unknown?",
        answer:
          "void используется для обозначения отсутствия возвращаемого значения из функции, never обозначает тип, который никогда не должен появляться, unknown представляет тип, о котором мало что известно, и используется в случаях, когда необходимо описать значение, тип которого будет определен позже.",
      },
      {
        question: "Как вы отлавливаете ошибки в TypeScript коде?",
        answer:
          "Ошибки в TypeScript коде обычно отлавливаются при помощи статической типизации, предоставляемой компилятором TypeScript, а также средами разработки, которые предоставляют подробные подсказки о потенциальных ошибках и предупреждения.",
      },
    ],
  },
  {
    header: "React (вопросы по библиотеке React)",
    questions: [
      {
        question: "Что такое React?",
        answer:
          "React - это JavaScript библиотека для создания пользовательских интерфейсов. Она позволяет разрабатывать компоненты пользовательского интерфейса и обладает высокой производительностью благодаря использованию виртуального DOM.",
      },
      {
        question: "Перечислите особенности React?",
        answer:
          "Некоторые особенности React включают в себя использование виртуального DOM для оптимизации обновлений интерфейса, компонентную архитектуру, односторонний поток данных, использование JSX для описания пользовательского интерфейса и возможность работы как на стороне клиента, так и на сервере.",
      },
      {
        question: "Что такое Virtual DOM? Как он работает с React?",
        answer:
          "Виртуальный DOM - это концепция, используемая в React для оптимизации обновлений интерфейса. Он представляет собой копию реального DOM, которая существует только в памяти. React использует виртуальный DOM для определения оптимальных изменений, которые затем применяются к реальному DOM только в виде минимального набора обновлений, что улучшает производительность при обновлении интерфейса.",
      },
      {
        question: "Для чего нужен атрибут key при рендере списков?",
        answer:
          "Атрибут key используется в React для определения уникальности каждого элемента списка в виртуальном DOM. Это позволяет React правильно сопоставлять элементы списка во время их обновления, что улучшает производительность и избегает проблем с преждевременными перерисовками компонентов.",
      },
      {
        question: "Что такое PureComponent?",
        answer:
          "В React компонент PureComponent - это специализированный компонент, который реализует метод shouldComponentUpdate с проверкой на изменение свойств и состояния по умолчанию. Это позволяет оптимизировать производительность компонента, предотвращая его лишнюю перерисовку при отсутствии изменений в данных.",
      },
      {
        question:
          "Что такое Компонент высшего порядка (Higher-Order Component/HOC)?",
        answer:
          "Компонент высшего порядка (HOC) - это функция, которая принимает компонент и возвращает новый компонент. HOC используется для повторного использования логики между компонентами, добавления функциональности или изменения поведения компонентов.",
      },
      {
        question:
          "Разница между управляемыми (controlled) и неуправляемыми (uncontrolled) компонентами?",
        answer:
          "Управляемые компоненты связаны со значениями формы через свойства и обрабатывают изменения через обратные вызовы. Неуправляемые компоненты, напротив, используют ссылки на элементы DOM, чтобы получить доступ к значениям формы и обрабатывать изменения.",
      },
      {
        question: "Методы жизненного цикла компонента в React?",
        answer:
          "В React компоненте существуют различные методы жизненного цикла, такие как componentDidMount, componentDidUpdate, componentWillUnmount, shouldComponentUpdate и другие. Они позволяют разработчику взаимодействовать с различными этапами жизненного цикла компонента.",
      },
      {
        question: "Стадии жизненного цикла компонента в React?",
        answer:
          "Жизненный цикл компонента в React состоит из различных стадий, таких как инициализация, монтирование, обновление и размонтирование. Каждая стадия предоставляет возможность для выполнения определенных действий, таких как инициализация состояния, обновление DOM или освобождение ресурсов.",
      },
      {
        question: "Что такое React Reconciliation?",
        answer:
          "В React Reconciliation - это процесс сравнения виртуального DOM с реальным DOM для определения минимального набора изменений, который необходимо применить для обновления интерфейса. Это позволяет React обновлять только те части интерфейса, которые действительно изменились, улучшая производительность.",
      },
      {
        question: "Что такое портал (Portal)?",
        answer:
          "Портал в React позволяет рендерить дочерние элементы в DOM-узел за пределами родительского компонента по иерархии DOM. Это полезно для создания интерфейсных элементов, которые должны быть размещены вне своего родительского компонента.",
      },
      {
        question: "Что такое контекст (Context)?",
        answer:
          "Контекст (Context) в React - это механизм, который позволяет передавать данные через дерево компонентов без необходимости передачи пропсов через каждый компонент. Контекст используется для обеспечения глобального доступа к данным в приложении.",
      },
      {
        question: "Что такое React хуки (Hooks)?",
        answer:
          "React хуки (Hooks) - это функции, которые позволяют вам использовать состояние и другие возможности React без написания классовых компонентов. Хуки вводят возможность повторного использования логики состояния и побочных эффектов в функциональных компонентах.",
      },
      {
        question: "Что такое JSX?",
        answer:
          "JSX - это расширение синтаксиса JavaScript, которое позволяет писать HTML-подобные структуры внутри JavaScript кода. JSX транспилируется в вызовы функций React.createElement() для создания элементов React.",
      },
      {
        question: "Разница между состоянием(state) и пропсами(props)?",
        answer:
          "Состояние (state) относится к данным, принадлежащим конкретному компоненту и управляемым им. Пропсы (props) - это данные, которые передаются в компонент из его родительского компонента. Состояние изменяемо, пропсы неизменяемы.",
      },
      {
        question: "Что такое React Fiber?",
        answer:
          "React Fiber - это переработанная внутренняя архитектура React, позволяющая улучшить производительность при обновлении интерфейса и поддерживать прерывания и приоритеты в процессе реконцилиации виртуального DOM.",
      },
      {
        question:
          "Что такое фрагмент (Fragment)? Почему фрагмент лучше, чем div?",
        answer:
          "Фрагмент (Fragment) - это компонент React, который позволяет группировать массив дочерних элементов без необходимости добавления лишних уровней оберток как в случае с div. Фрагмент лучше, чем div, потому что не влияет на структуру DOM и не добавляет лишние узлы.",
      },
      {
        question: "Что такое синтетические события в React?",
        answer:
          "Синтетические события в React - это кроссбраузерная обертка над нативными событиями браузера, предоставляющая интерфейс единообразного доступа к событиям для разных браузеров. Они предоставляют дополнительную функциональность и безопасность в обработке событий.",
      },
      {
        question: "Что такое React-ссылка (ref)? Как создать ссылку?",
        answer:
          "React-ссылка (ref) используется для получения прямого доступа к DOM-узлам или экземплярам компонентов в React. Для создания ссылки можно использовать функцию React.createRef() или хук useRef(), и присвоить ссылку к элементу или компоненту через атрибут ref.",
      },
      {
        question: "Разница между теневым (Shadow) и виртуальным (Virtual) DOM?",
        answer:
          "Теневой DOM (Shadow DOM) - это часть веб-стандартов, представляющая из себя изолированное DOM-дерево, что позволяет инкапсулировать стили и скрипты компонентов. Виртуальный DOM (Virtual DOM) - это концепция, используемая в React, представляющая частичную копию реального DOM для оптимизации обновлений интерфейса.",
      },
      {
        question: "Назовите преимущества использования React?",
        answer:
          "Некоторые преимущества использования React включают в себя виртуальный DOM для эффективных обновлений интерфейса, компонентную архитектуру для удобного разделения логики, JSX для декларативного описания пользовательского интерфейса, поддержку React хуков для управления состоянием в функциональных компонентах и широкое сообщество пользователей с богатой документацией.",
      },
      {
        question:
          "Что такое условный рендеринг (Conditional Rendering)? Как его выполнить?",
        answer:
          "Условный рендеринг (Conditional Rendering) - это подход, при котором решается, должен ли компонент рендериться в зависимости от определенных условий. Это можно выполнить в React, используя конструкцию условного оператора if или тернарного оператора внутри метода render компонента.",
      },
      {
        question: "Что такое компонент-переключатель (Switching Component)?",
        answer:
          "Компонент-переключатель (Switching Component) в React обычно относится к компоненту, который рендерит разные дочерние компоненты в зависимости от определенных условий или состояния компонента.",
      },
      {
        question: "Разница между React и ReactDOM?",
        answer:
          "React - это библиотека для разработки пользовательского интерфейса веб-приложений. ReactDOM - это пакет, который обеспечивает связь между React и DOM браузера, позволяя рендерить React-компоненты в реальный DOM.",
      },
      {
        question: "Разница между компонентом и контейнером?",
        answer:
          "В контексте React компонент - это часть пользовательского интерфейса, которая имеет собственное состояние и жизненный цикл. Контейнер - это компонент, который обычно связан с Redux и отвечает за управление данными и взаимодействие с хранилищем.",
      },
      {
        question:
          "Как React обрабатывает, или ограничивает использование пропсов определенного типа?",
        answer:
          "React позволяет определить типы пропсов компонента с помощью PropTypes или TypeScript, чтобы обеспечить типовую безопасность и ограничить использование пропсов определенного типа. В случае использования TypeScript, это делается с помощью интерфейсов.",
      },
      {
        question: "Что такое строгий режим в React? Его преимущества?",
        answer:
          "Строгий режим (Strict Mode) в React - это инструмент для поиска и предупреждения о потенциальных проблемах в компонентах. Его преимущества включают в себя выявление неоптимального использования API, обнаружение устаревших жизненных циклов и предупреждение о потенциальных проблемах в коде компонентов.",
      },
      {
        question:
          "Что такое «бурение пропсов» (Prop Drilling)? Как его избежать?",
        answer:
          "«Бурение пропсов» (Prop Drilling) - это ситуация, когда пропсы передаются через несколько уровней вложенных компонентов. Чтобы избежать этого, можно использовать React Context для передачи данных через дерево компонентов без явной передачи пропсов на каждом уровне.",
      },
      {
        question: "Что такое «опрос» (Polling)? Как его реализовать в React?",
        answer:
          "«Опрос» (Polling) - это техника, при которой клиентский код периодически отправляет запросы на сервер для получения обновленных данных. В React это можно реализовать с помощью функций-таймеров, например, setInterval, для выполнения периодических запросов.",
      },
      {
        question: "Разница между элементом и компонентом?",
        answer:
          "Элемент (Element) в React представляет собой описание того, что должно быть отрисовано на экране в виде объекта. Компонент (Component) - это функция или класс, возвращающая React-элементы и управляющая их поведением и состоянием.",
      },
      {
        question: "Что такое ReactDOMServer?",
        answer:
          "ReactDOMServer - это пакет в React, который предоставляет методы для рендеринга компонентов React на сервере. Он позволяет использовать React для создания статического контента на сервере и его отдачи клиенту.",
      },
      {
        question: "Что такое предохранители (Error Boundaries)?",
        answer:
          "Предохранители (Error Boundaries) - это компоненты в React, которые служат для обработки ошибок в дочерних компонентах во время рендеринга. Они позволяют изолировать ошибки, предотвращая их распространение по всему приложению.",
      },
      {
        question: "Что такое «ленивая» (Lazy) функция?",
        answer:
          "«Ленивая» (Lazy) функция - это новая возможность в React, позволяющая динамически импортировать компоненты в момент их реального использования, что позволяет улучшить производительность за счет уменьшения начальной загрузки приложения.",
      },
      {
        question: "Разница между рендерингом и монтированием?",
        answer:
          "Рендеринг (rendering) - это процесс преобразования компонента в представление, которое пользователь видит, тогда как монтирование (mounting) - это процесс добавления компонента в DOM. Рендеринг происходит при каждом обновлении компонента, а монтирование - только один раз при создании.",
      },
      {
        question: "Что такое children?",
        answer:
          "В React, children - это специальное свойство, которое позволяет передавать дочерние элементы или компоненты внутрь других компонентов. Это позволяет создавать композицию компонентов и использовать их вложенность.",
      },
      {
        question: "Что такое события указателя (Pointer Events)?",
        answer:
          "События указателя (Pointer Events) - это API веб-стандартов, предоставляющее единую модель для обработки событий, связанных с указателями (например, мышью, сенсорными устройствами и стилусами) на веб-страницах.",
      },
      {
        question: "Что такое инверсия наследования (Inheritance Inversion)?",
        answer:
          "Инверсия наследования (Inheritance Inversion) - это паттерн, при котором ответственность распределена между компонентами наследника и компонентом-прародителем, что позволяет лучше контролировать поведение и состояние компонентов.",
      },
      {
        question: "Как в React реализовать двустороннее связывание данных?",
        answer:
          "Двустороннее связывание данных в React можно реализовать с использованием управляемых компонентов, где значение инпута или другого элемента формы привязано к состоянию компонента, и обновление состояния автоматически отражается в UI.",
      },
      {
        question: "Разница между классовым и функциональным компонентами?",
        answer:
          "Основная разница между классовым и функциональным компонентами в React заключается в синтаксисе и возможностях. Классовый компонент обладает жизненным циклом, состоянием и другими возможностями, в то время как функциональный компонент используется с хуками и обычно более лаконичен.",
      },
      {
        question: "Разница между useEffect() и componentDidMount()?",
        answer:
          "useEffect() - это хук в React, который выполняет побочные эффекты в функциональном компоненте, а componentDidMount() - это метод жизненного цикла в классовом компоненте, который вызывается после монтирования компонента и выполнения первичного рендеринга.",
      },
      {
        question: "Преимущества хуков?",
        answer:
          "Некоторые преимущества хуков в React включают в себя возможность использования состояния и других возможностей React в функциональных компонентах, повторное использование логики с помощью пользовательских хуков, улучшение читаемости кода и разделение ответственностей.",
      },
      {
        question: "Недостатки хуков?",
        answer:
          "Несмотря на их преимущества, недостатки хуков в React могут включать в себя сложность отладки из-за возможности повторного использования хуков в разных компонентах, переизбыточность некоторой логики из-за повторного использования хуков и необходимость быть внимательным к правильному использованию хуков.",
      },
      {
        question: "Правила (ограничения) использования хуков?",
        answer:
          "Правила использования хуков в React включают в себя следующее: хуки следует вызывать на верхнем уровне функционального компонента, они не должны вызываться в циклах, условиях или вложенных функциях, имена хуков должны начинаться с префикса 'use'.",
      },
      {
        question: "Что такое поднятие состояния вверх (Lifting State Up)?",
        answer:
          "Поднятие состояния вверх - это паттерн в React, при котором состояние, которое используют несколько компонентов, поднимается на ближайший общий родительский компонент, чтобы обеспечить одну общую точку управления состоянием.",
      },
      {
        question: "Что делает метод shouldComponentUpdate?",
        answer:
          "Метод shouldComponentUpdate - это метод жизненного цикла классового компонента в React, который определяет, следует ли React обновлять компонент при изменении состояния или пропсов. При возврате значения true компонент будет обновлен, при false - нет.",
      },
      {
        question: "Разница между createElement() и cloneElement()?",
        answer:
          "createElement() - это функция React для создания элемента React без использования JSX, а cloneElement() - для клонирования элемента с возможностью задания новых пропсов. Разница в том, что cloneElement() сохраняет пропсы изначального элемента.",
      },
      {
        question: "Что такое useReducer()?",
        answer:
          "useReducer() - это хук в React, который используется для управления сложным состоянием компонента с помощью функции редуктора, похожей на использование Redux. Он позволяет обновлять состояние и передавать действия для обновления на основе предыдущего состояния.",
      },
      {
        question:
          "Как реализовать однократное выполнение операции при начальном рендеринге?",
        answer:
          "Для однократного выполнения операции при начальном рендеринге в React можно использовать useEffect() с пустым массивом зависимостей [] вторым аргументом. Это гарантирует, что эффект будет запущен только при монтировании компонента.",
      },
      {
        question: "Что такое распределенный компонент?",
        answer:
          "Распределенный компонент - это компонент в React, разбитый на несколько компонентов, которые могут быть монтированы и управляться независимо друг от друга, а затем объединены для создания общего интерфейса или функционала.",
      },
      {
        question:
          "Расскажите о хуках useCallback(), useMemo(), useImperativeHandle(), useLayoutEffect()?",
        answer:
          "Хук useCallback() используется для оптимизации производительности, сохраняя колбэк между рендерами. useMemo() используется для кэширования мемоизированных значений. useImperativeHandle() позволяет компонентам предоставить экземпляр себя родительским компонентам. useLayoutEffect() аналогичен useEffect(), но запускается синхронно после всех изменений в DOM. ",
      },
      {
        question: "Как отрендерить HTML код в React-компоненте?",
        answer:
          "В React можно отрендерить HTML код, включая теги и содержимое, с помощью JSX, который позволяет писать HTML-подобный код непосредственно в JavaScript.",
      },
      {
        question: "Зачем в setState() нужно передавать функцию?",
        answer:
          "В setState() в React рекомендуется передавать функцию вместо объекта для обновления состояния, чтобы гарантировать корректное обновление состояния, особенно при использовании асинхронных операций.",
      },
      {
        question:
          "Для чего предназначен метод registerServiceWorker() в React?",
        answer:
          "Метод registerServiceWorker() в React используется для регистрации служебного работника, который позволяет кэшировать статические файлы и обеспечивает работу в оффлайн-режиме.",
      },
      {
        question: "Чем React Router отличается от обычной маршрутизации?",
        answer:
          "React Router обеспечивает декларативную маршрутизацию в React-приложениях, позволяя определять маршруты в виде компонентов, в то время как обычная маршрутизация обычно требует настройки на уровне сервера.",
      },
      {
        question: "Какие хуки были добавлены в React Router версии 5?",
        answer:
          "В React Router версии 5 были добавлены хуки useHistory, useLocation и useParams для взаимодействия с историей переходов, данными о текущем URL и параметрами маршрута соответственно.",
      },
      {
        question: "Как передавать пропсы в React Router?",
        answer:
          "Пропсы можно передавать в React Router через компонент Route с использованием атрибута component или render, либо через компоненты-обертки.",
      },
      {
        question: "Что такое Reselect и как он работает?",
        answer:
          "Reselect - это библиотека для создания селекторов (selectors) в приложениях на React/Redux. Он позволяет кэшировать и мемоизировать результаты селекторов, улучшая производительность приложения.",
      },
      {
        question: "Назовите основную цель React Fiber?",
        answer:
          "Основная цель React Fiber - это улучшение производительности и возможности приостановки и возобновления процесса рендеринга компонентов, чтобы сделать React более отзывчивым и обеспечить плавный пользовательский опыт.",
      },
      {
        question: "Какие типы данных может возвращать render?",
        answer:
          "Метод render в React может возвращать JSX элементы, строки, числа, массивы элементов, порталы, фрагменты или null/undefined.",
      },
      {
        question: "Разница между memo и useMemo?",
        answer:
          "memo - это HOC (Higher Order Component), который используется для мемоизации функциональных компонентов, чтобы предотвратить их излишнее перерендеривание. useMemo - это хук, который мемоизирует результат вычислений между рендерами компонента, чтобы оптимизировать производительность.",
      },
      {
        question: "Что такое синтетические события (SyntheticEvent) в React?",
        answer:
          "Синтетические события (SyntheticEvent) - это кросс-браузерная обертка над нативными событиями браузера в React, предоставляющая однородный интерфейс для работы с событиями независимо от браузера.",
      },
      {
        question: "Является ли React реактивным?",
        answer:
          "Да, React можно считать реактивным, так как он обновляет пользовательский интерфейс на основе изменений данных, обеспечивая отзывчивость интерфейса на изменения пользователя или данных.",
      },
      {
        question: "Техники оптимизации производительности React?",
        answer:
          "Некоторые техники оптимизации производительности React включают код-сплиттинг, мемоизацию, виртуализацию списков, ленивую загрузку компонентов, оптимизацию рендеринга с помощью PureComponent или React.memo, а также использование shouldComponentUpdate и хуков useMemo и useCallback.",
      },
      {
        question: "Лучшие практики безопасности в React?",
        answer:
          "К ним относятся: обработка пользовательских данных и входов, избегание вставки HTML напрямую из сторонних источников, защита от XSS-атак, управление состоянием безопасности, использование HTTPS, тщательная проверка и установка зависимостей, и т. д.",
      },
      {
        question: "Как работает пропс children в React?",
        answer:
          "Пропс children - это специальный пропс, который содержит все дочерние компоненты переданные между открывающим и закрывающим тегами компонента. Он может быть использован для передачи компонентов, строк или других JSX-элементов.",
      },
      {
        question: "Что такое обратный поток данных в React?",
        answer:
          "Обратный поток данных (two-way binding) в React - это механизм, который позволяет изменениям в пользовательском интерфейсе влиять на данные и наоборот. В React этот подход не применяется по умолчанию, вместо этого используется управляемый компонент (controlled component) c управлением состоянием через обратные вызовы.",
      },
      {
        question:
          "Как использовать React.lazy и React.Suspense для запуска кода приложения?",
        answer:
          "React.lazy используется для ленивой загрузки динамических импортов компонентов, а React.Suspense предоставляет возможность ожидания пока динамически загруженный компонент будет доступен, чтобы пока он не загрузится, отрендерить заглушку или индикатор загрузки.",
      },
    ],
  },
  {
    header: "State management (вопросы по менеджменту состояния)",
    questions: [
      {
        question: "Что такое Flux?",
        answer:
          "Flux - это архитектурный подход, созданный Facebook, для управления состоянием в веб-приложениях. Он предлагает односторонний поток данных, разделение данных и логики, и предотвращает сложность взаимодействия компонентов.",
      },
      {
        question: "Что такое Redux? Ключевые принципы Redux?",
        answer:
          "Redux - это библиотека управления состоянием приложения для JavaScript/React. Ключевые принципы Redux: единый источник истины, состояние только для чтения, изменения состояния производятся чистыми функциями (редьюсерами) и использование нормализованной структуры данных.",
      },
      {
        question: "Разница между Redux и Flux?",
        answer:
          "Redux является конкретной реализацией и расширением идеи Flux. Основные различия: Redux имеет единый глобальный объект состояния, использует иммутабельность, имеет чистые редьюсеры для изменения состояния, асинхронные действия обрабатываются с помощью middleware.",
      },
      {
        question: "Ключевые концепции Redux?",
        answer:
          "Некоторые ключевые концепции Redux включают: единый источник истины, неизменяемость состояния, действие (action), редьюсер (reducer), хранилище (store), диспетчер (dispatcher), связывание с помощью connect и middleware.",
      },
      {
        question:
          "Что такое «единственный источник истины» (Single Source of Truth)?",
        answer:
          "Принцип Redux, где весь состав приложения хранится в единственном объекте состояния (store), что обеспечивает единый источник истины для всего приложения.",
      },
      {
        question: "Что такое редьюсер (Reducer)?",
        answer:
          "Редьюсер в Redux - это чистая функция, которая принимает предыдущее состояние и действие, и возвращает новое состояние. Редьюсеры используются для обновления состояния в Redux.",
      },
      {
        question: "Разница между React State и Redux State?",
        answer:
          "React State предназначен для управления локальным состоянием компонента, в то время как Redux State - это глобальное состояние приложения, доступное для всех компонентов.",
      },
      {
        question: "Как выглядит поток данных в Redux-приложении?",
        answer:
          "Действие (action) инициирует изменение состояния в Redux-приложении. Действие передается в редьюсер, который обновляет состояние, после чего обновленное состояние становится доступным для компонентов для отображения.",
      },
      {
        question: "Плюсы и минусы Redux?",
        answer:
          "Плюсы Redux: улучшенная предсказуемость состояния, улучшенная поддержка отладки, упрощение управления состоянием. Минусы Redux: больше кода для настройки и поддержания, возможно избыточное использование в небольших проектах, крутой порог вхождения.",
      },
    ],
  },
  {
    header: "Testing (базовые вопросы по тестированию)",
    questions: [
      {
        question: "Какие бывают виды тестирования?",
        answer:
          "Существует несколько видов тестирования, включая модульное тестирование, интеграционное тестирование, системное тестирование, приемочное тестирование, регрессионное тестирование, производительсотные тесты и тестирование безопасности.",
      },
      {
        question: "Что такое Fake в unit тестировании?",
        answer:
          "Fake в unit тестировании - это имитация реального компонента, которая обычно реализована для обеспечения контролируемого поведения для тестов.",
      },
      {
        question: "Что такое Stub в unit тестировании?",
        answer:
          "Stub в unit тестировании - это замена компонента, которая предоставляет жестко закодированные ответы для вызовов методов или функций в тестах.",
      },
      {
        question: "Что такое Mock в unit тестировании?",
        answer:
          "Mock в unit тестировании - это объект, который имитирует поведение реального объекта в контролируемой среде, обычно используемый для утверждения вызовов методов и параметров.",
      },
      {
        question: "Разница между Mock и Stub?",
        answer:
          "Основная разница между Mock и Stub заключается в том, что Mock обеспечивает проверку вызовов методов и их параметров, в то время как Stub предоставляет жестко закодированные ответы для вызовов методов.",
      },
      {
        question: "Что такое White/Black/Grey Box-тестирование?",
        answer:
          "White Box-тестирование - тестирование, основанное на знании внутренней структуры и реализации кода; Black Box-тестирование - тестирование без знания внутренней структуры кода, основанное на спецификациях; Grey Box-тестирование - комбинация White и Black Box-тестирования.",
      },
      {
        question: "Что такое Quality Gates?",
        answer:
          "Quality Gates - это набор условий или критериев, которые определяют уровень качества кода, который необходим для продолжения процесса разработки, например, успешное прохождение всех тестов, статический анализ кода и т.д.",
      },
      {
        question: "Разница между TDD и BDD?",
        answer:
          "TDD (Test-Driven Development) - это методология разработки, при которой тесты пишутся перед реализацией кода; BDD (Behavior-Driven Development) - это подход, который сфокусирован на поведении системы, позволяя описывать поведение в человекочитаемом формате перед написанием кода или тестов.",
      },
      {
        question:
          "Что такое UI-тестирование? Назовите подходы UI-тестирования?",
        answer:
          "UI-тестирование проверяет, что пользовательский интерфейс приложения работает ожидаемым образом. Подходы UI-тестирования могут включать ручное тестирование, автоматизированное тестирование с использованием инструментов, например, Selenium, WebDriver, TestCafe, Puppeteer, и другие.",
      },
      {
        question: "Как можно оценить качество тестирования?",
        answer:
          "Качество тестирования можно оценить по покрытию кода тестами, стабильности и надежности тестов, быстроте их выполнения, способности обнаруживать дефекты, а также соответствию требованиям заказчика.",
      },
      {
        question: "Какие инструменты тестирования вы знаете?",
        answer:
          "Некоторые инструменты тестирования включают в себя JUnit, TestNG, Mocha, Jasmine, Selenium, WebDriver, TestCafe, Puppeteer, Postman, JMeter, Gatling, SoapUI, Cypress, Jest, и другие.",
      },
      {
        question: "Что такое Testing Trophy?",
        answer:
          "Testing Trophy - это концепция, предложенная Кента Беком, описывающая пирамиду автоматизированных тестов, где основной слой составляют модульные тесты, затем интеграционные тесты, а затем UI-тесты.",
      },
      {
        question: "Что такое принцип FIRST в тестировании?",
        answer:
          "Принцип FIRST в тестировании описывает хорошие практики для написания тестов: быстрота (Fast), изолированность (Independent), повторяемость (Repeatable), самосостоятельность (Self-validating), своевременность (Timely). Этот принцип помогает создавать поддерживаемые, устойчивые и информативные тесты.",
      },
    ],
  },
  {
    header: "Tools (вопросы по различным инструментам веб-разработки)",
    questions: [
      {
        question: "Что такое Babel? Для чего он используется?",
        answer:
          "Babel - это инструмент трансляции кода, который используется для преобразования современного JavaScript кода (например, ES6+) в старый совместимый с более широким спектром браузеров и сред выполнения JavaScript.",
      },
      {
        question: "Что такое tree shaking? Для чего используется tree shaking?",
        answer:
          "Tree shaking - это процесс оптимизации вебпак-пакетов, при котором удаляются неиспользуемые (мертвые) части кода из финального бандла JavaScript. Это позволяет уменьшить размер и улучшить производительность приложения.",
      },
      {
        question: "Что такое stylelint? Назовите особенности stylelint?",
        answer:
          "Stylelint - это инструмент статического анализа CSS кода, который используется для проверки соответствия кода определенным конвенциям или стандартам оформления. Особенности stylelint включают настраиваемые правила, плагины-расширения, возможность интеграции с различными инструментами сборки.",
      },
      {
        question: "Что такое статический анализ кода?",
        answer:
          "Статический анализ кода - это процесс проверки и анализа исходного кода без его непосредственного выполнения, с целью обнаружения потенциальных проблем, ошибок, стилевых нарушений и соблюдения стандартов кодирования.",
      },
      {
        question: "Что такое Git CLI?",
        answer:
          "Git CLI - это интерфейс командной строки для управления версиями кода с помощью системы контроля версий Git. С его помощью можно выполнять различные операции, такие как создание коммитов, веток, слияние изменений и другие.",
      },
      {
        question:
          "Как работает Webpack? Какие основные концепции в нем существуют?",
        answer:
          "Webpack - это инструмент сборки, который берет модули с зависимостями и преобразует их в статические ресурсы в виде бандлов. Основные концепции в Webpack включают загрузчики (loaders), плагины (plugins), точку входа (entry point), точку вывода (output point), модули.",
      },
      {
        question: "Какие основные задачи выполняет Webpack при сборке проекта?",
        answer:
          "Основные задачи Webpack при сборке проекта включают объединение JavaScript файлов в один бандл, обработку других типов файлов через лоадеры (loaders), оптимизацию, минификацию, tree shaking, генерацию статических ассетов и другие.",
      },
      {
        question:
          "Что такое бандл (bundle)? Как он используется во Frontend разработке?",
        answer:
          "Бандл (bundle) - это файл, в котором объединены все необходимые для работы приложения ресурсы, такие как JavaScript файлы, стили, изображения и другие ассеты. Бандл используется во Frontend разработке для эффективной доставки приложения на клиентскую сторону.",
      },
      {
        question: "Какие проблемы могут возникнуть при работе с Git?",
        answer:
          "При работе с Git могут возникнуть проблемы, такие как конфликты слияния (merge conflicts), потеря данных из-за неправильных действий, неправильно решенные конфликты, случайное удаление важного кода и другие.",
      },
      {
        question: "Что такое пулреквест и как его сделать на GitHub?",
        answer:
          "Pull Request (пулреквест) - это механизм в системах контроля версий, который позволяет разработчикам предложить изменения из своей ветки кода в другую ветку. Для создания пулреквеста на GitHub необходимо перейти на страницу своего репозитория, выбрать вкладку Pull requests, нажать на кнопку New pull request, выбрать ветки для сравнения и создать пулреквест.",
      },
    ],
  },
  {
    header: "Soft skills (вопросы по нетехническим навыкам)",
    questions: [
      {
        question: "Что такое SDLC?",
        answer:
          "SDLC (Software Development Life Cycle) - жизненный цикл разработки программного обеспечения, который описывает различные фазы разработки, от планирования до сопровождения и поддержки программного продукта.",
      },
      {
        question: "Что такое Agile?",
        answer:
          "Agile - методология разработки программного обеспечения, основанная на итеративном и гибком подходе к управлению проектами, способствующая быстрой адаптации к изменениям, вовлечению заказчика и вниманию к качеству разработки.",
      },
      {
        question: "Что такое код ревью? Почему оно важно?",
        answer:
          "Код ревью - это процесс проверки кода другого разработчика на соответствие стандартам, ошибки, улучшения и оценку качества кода. Код ревью важно, потому что это позволяет выявить потенциальные ошибки, обменяться знаниями, улучшить качество кода и продукта в целом.",
      },
      {
        question: "Что такое CI/CD?",
        answer:
          "CI/CD (Continuous Integration/Continuous Deployment) - это практика разработки программного обеспечения, которая включает в себя непрерывное интегрирование изменений в общую кодовую базу и непрерывное автоматическое развертывание приложения.",
      },
      {
        question: "Плюсы CI/CD?",
        answer:
          "Некоторые плюсы CI/CD включают автоматизацию процесса сборки и развертывания, быструю обратную связь, снижение рисков, повышение надежности и качества кода, сокращение времени доставки нового функционала и другие.",
      },
      {
        question: "Что такое технический долг?",
        answer:
          "Технический долг - это метафорический термин, который описывает ситуацию, когда разработчики выбирают быстрое, но временное решение, в ущерб более длительному и устойчивому решению. Этот долг требует погашения в будущем, иначе может привести к проблемам в поддержке и развитии продукта.",
      },
      {
        question: "Что такое функциональные и нефункциональные требования?",
        answer:
          "Функциональные требования описывают функции, сервисы или основные возможности, которые должны быть реализованы в продукте. Нефункциональные требования определяют как продукт должен работать, включая такие аспекты как производительность, безопасность, масштабируемость и т.д.",
      },
      {
        question: "Разница между POC, Prototype и MVP?",
        answer:
          "POC (Proof of Concept) - доказательство концепции, Prototype - прототип для демонстрации функций и интерфейса, MVP (Minimum Viable Product) - минимально жизнеспособный продукт с базовым набором функций для реального использования.",
      },
      {
        question: "Разница между DoD и DoR?",
        answer:
          "DoD (Definition of Done) - определяет критерии завершения задачи или итерации, DoR (Definition of Ready) - определяет критерии, которые должны быть выполнены перед началом выполнения задачи.",
      },
      {
        question: "Почему критерии DoD и DoR важны для проекта?",
        answer:
          "Критерии DoD и DoR важны, так как они помогают установить прозрачные стандарты и ожидания в команде, способствуют более эффективной работе, улучшают качество работы и уменьшают риски на проекте.",
      },
      {
        question:
          "Кто такой стейкхолдер (stakeholder)? Расскажите о матрице RACI?",
        answer:
          "Стейкхолдер (stakeholder) - это любая заинтересованная сторона, организация или лицо, которое может влиять на проект или быть влиянием на проект. Матрица RACI используется для определения ролей и ответственностей в проекте: R - ответственный, A - вовлеченный, C - информированный, I - отвечающий.",
      },
      {
        question: "Разница между менторингом и коучингом?",
        answer:
          "Менторинг - это отношение, где более опытный человек (ментор) передает знания и опыт менее опытному, коучинг - это процесс, где коуч помогает клиенту найти самостоятельные решения, развивает навыки и способности клиента.",
      },
      {
        question: "Опишите суть методологии GitFlow?",
        answer:
          "GitFlow - это модель управления ветками в Git, где существуют основные ветки: master (production-ready код), develop (разработка), а также вспомогательные ветки feature (новая функциональность), release (подготовка к релизу), hotfix (исправление проблем на продукции).",
      },
    ],
  },
];
